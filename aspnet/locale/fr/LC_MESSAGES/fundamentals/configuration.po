#
msgid ""
msgstr ""
"Project-Id-Version: ASP.NET 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-12 14:35-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\fundamentals\configuration.rst:2
msgid "Configuration"
msgstr ""

#: ..\..\fundamentals\configuration.rst:3
msgid "By `Steve Smith`_ and `Daniel Roth`_"
msgstr ""

#: ..\..\fundamentals\configuration.rst:5
msgid ""
"ASP.NET 5 supports a variety of different configuration options. Application"
" configuration data can come from files using built-in support for JSON, "
"XML, and INI formats, as well as from environment variables. You can also "
"write your own :ref:`custom configuration provider <custom-config-"
"providers>`."
msgstr ""

#: ..\..\fundamentals\configuration.rst:11
msgid "In this article:"
msgstr ""

#: ..\..\fundamentals\configuration.rst:8
msgid "`Getting and setting configuration settings`_"
msgstr ""

#: ..\..\fundamentals\configuration.rst:9
msgid "`Using the built-in providers`_"
msgstr ""

#: ..\..\fundamentals\configuration.rst:10
msgid "`Using Options and configuration objects`_"
msgstr ""

#: ..\..\fundamentals\configuration.rst:11
msgid "`Writing custom providers`_"
msgstr ""

#: ..\..\fundamentals\configuration.rst:13
msgid "`Download sample from GitHub <https://github.com/aspnet/docs>`_."
msgstr ""

#: ..\..\fundamentals\configuration.rst:16
msgid "Getting and setting configuration settings"
msgstr ""

#: ..\..\fundamentals\configuration.rst:18
msgid ""
"ASP.NET 5's configuration system has been re-architected from previous "
"versions of ASP.NET, which relied on ``System.Configuration`` and XML "
"configuration files like ``web.config``. The new `configuration model "
"<https://github.com/aspnet/Configuration>`_ provides streamlined access to "
"key/value based settings that can be retrieved from a variety of sources. "
"Applications and frameworks can then access configured settings using the "
"new :ref:`Options pattern <options-config-objects>`"
msgstr ""

#: ..\..\fundamentals\configuration.rst:20
msgid ""
"To work with settings in your ASP.NET application, it is recommended that "
"you only instantiate an instance of ``Configuration`` in your application's "
"``Startup`` class. Then, use the :ref:`Options pattern <options-config-"
"objects>` to access individual settings."
msgstr ""

#: ..\..\fundamentals\configuration.rst:22
msgid ""
"At its simplest, the ``Configuration`` class is just a collection of "
"``Sources``, which provide the ability to read and write name/value pairs. "
"You must configure at least one source in order for ``Configuration`` to "
"function correctly. The following sample shows how to test working with "
"``Configuration`` as a key/value store:"
msgstr ""

#: ..\..\fundamentals\configuration.rst:39
msgid "You must set at least one configuration source."
msgstr ""

#: ..\..\fundamentals\configuration.rst:41
msgid ""
"It's not unusual to store configuration values in a hierarchical structure, "
"especially when using external files (e.g. JSON, XML, INI). In this case, "
"configuration values can be retrieved using a ``:`` separated key, starting "
"from the root of the hierarchy. For example, consider the following "
"*appsettings.json* file:"
msgstr ""

#: ..\..\fundamentals\configuration.rst:49
msgid ""
"The application uses configuration to configure the right connection string."
" Access to the ``ConnectionString`` setting is achieved through this key: "
"``Data:DefaultConnection:ConnectionString``."
msgstr ""

#: ..\..\fundamentals\configuration.rst:51
msgid ""
"The settings required by your application and the mechanism used to specify "
"those settings (configuration being one example) can be decoupled using the "
":ref:`options pattern <options-config-objects>`. To use the options pattern "
"you create your own settings class (probably several different classes, "
"corresponding to different cohesive groups of settings) that you can inject "
"into your application using an options service. You can then specify your "
"settings using configuration or whatever mechanism you choose."
msgstr ""

#: ..\..\fundamentals\configuration.rst:53
msgid ""
"You could store your ``Configuration`` instance as a service, but this would"
" unnecessarily couple your application to a single configuration system and "
"specific configuration keys. Instead, you can use the :ref:`Options pattern "
"<options-config-objects>` to avoid these issues."
msgstr ""

#: ..\..\fundamentals\configuration.rst:56
msgid "Using the built-in providers"
msgstr ""

#: ..\..\fundamentals\configuration.rst:58
msgid ""
"The configuration framework has built-in support for JSON, XML, and INI "
"configuration files, as well as support for in-memory configuration "
"(directly setting values in code) and the ability to pull configuration from"
" environment variables and command line parameters. Developers are not "
"limited to using a single configuration source. In fact several may be set "
"up together such that a default configuration is overridden by settings from"
" another source if they are present."
msgstr ""

#: ..\..\fundamentals\configuration.rst:60
msgid ""
"Adding support for additional configuration file sources is accomplished "
"through extension methods. These methods can be called on a "
"``ConfigurationBuilder`` instance in a standalone fashion, or chained "
"together as a fluent API, as shown."
msgstr ""

#: ..\..\fundamentals\configuration.rst:70
msgid ""
"The order in which configuration sources are specified is important, as this"
" establishes the precedence with which settings will be applied if they "
"exist in multiple locations. In the example above, if the same setting "
"exists in both *appsettings.json* and in an environment variable, the "
"setting from the environment variable will be the one that is used. "
"Essentially, the last configuration source specified \"wins\" if a setting "
"exists in more than one location."
msgstr ""

#: ..\..\fundamentals\configuration.rst:72
msgid ""
"To override nested keys through environment variables in shells that don't "
"support ``:`` in variable names replace them with ``__`` (double "
"underscore)."
msgstr ""

#: ..\..\fundamentals\configuration.rst:74
msgid ""
"It can be useful to have environment-specific configuration files. This can "
"be achieved using the following:"
msgstr ""

#: ..\..\fundamentals\configuration.rst:83
msgid ""
"The ``IHostingEnvironment`` service is used to get the current environment. "
"In the ``Development`` environment, the highlighted line of code above would"
" look for a file named ``appsettings.Development.json`` and use its values, "
"overriding any other values, if it's present. Learn more about "
":doc:`environments`."
msgstr ""

#: ..\..\fundamentals\configuration.rst:85
msgid ""
"You should never store passwords or other sensitive data in source code or "
"in plain text configuration files. You also shouldn't use production secrets"
" in your development or test environments. Instead, such secrets should be "
"specified outside the project tree, so they cannot be accidentally committed"
" into the source repository. Learn more about :doc:`environments` and "
"managing :doc:`/security/app-secrets`."
msgstr ""

#: ..\..\fundamentals\configuration.rst:87
msgid ""
"One way to leverage the order precedence of ``Configuration`` is to specify "
"default values, which can be overridden. In this simple console application,"
" a default value for the ``username`` setting is specified in a "
"``MemoryConfigurationSource``, but this is overridden if a command line "
"argument for ``username`` is passed to the application. You can see in the "
"output how many configuration sources are configured at each stage of the "
"program."
msgstr ""

#: ..\..\fundamentals\configuration.rst:93
msgid ""
"When run, the program will display the default value unless a command line "
"parameter overrides it."
msgstr ""

#: ..\..\fundamentals\configuration.rst:100
msgid "Using Options and configuration objects"
msgstr ""

#: ..\..\fundamentals\configuration.rst:102
msgid ""
"Using `Options <https://github.com/aspnet/Options>`_ you can easily convert "
"any class (or POCO - Plain Old CLR Object) into a settings class. It's "
"recommended that you create well-factored settings objects that correspond "
"to certain features within your application, thus following the Interface "
"Segregation Principle (ISP) (classes depend only on the configuration "
"settings they use) as well as Separation of Concerns (settings for disparate"
" parts of your app are managed separately, and thus are less likely to "
"negatively impact one another)."
msgstr ""

#: ..\..\fundamentals\configuration.rst:104
msgid "A simple ``MyOptions`` class is shown here:"
msgstr ""

#: ..\..\fundamentals\configuration.rst:112
msgid ""
"Options can be injected into your application using the "
"``IOptions<TOptions>`` service. For example, the following :ref:`MVC "
"<mvc:index>` controller uses ``IOptions<MyOptions>`` to access the settings "
"it needs to render the ``Index`` view:"
msgstr ""

#: ..\..\fundamentals\configuration.rst:120
msgid "Learn more about :doc:`dependency-injection`."
msgstr ""

#: ..\..\fundamentals\configuration.rst:122
msgid ""
"To setup the ``IOptions<TOption>`` service you call the ``AddOptions()`` "
"extension method during startup in your ``ConfigureServices`` method:"
msgstr ""

#: ..\..\fundamentals\configuration.rst:132
msgid "The ``Index`` view displays the configured options:"
msgstr ""

#: ..\..\fundamentals\configuration.rst:136
msgid ""
"You configure options using the ``Configure<TOption>`` extension method. You"
" can configure options using a delegate or by binding your options to "
"configuration:"
msgstr ""

#: ..\..\fundamentals\configuration.rst:145
msgid ""
"When you bind options to configuration each property in your options type is"
" bound to a configuration key of the form ``property:subproperty:...``. For "
"example, the ``MyOptions.Option1`` property is bound to the key ``Option1``,"
" which is read from the ``option1`` property in *appsettings.json*. Note "
"that configuration keys are case insensitive."
msgstr ""

#: ..\..\fundamentals\configuration.rst:147
msgid ""
"Each call to ``Configure<TOption>`` adds an ``IConfigureOptions<TOption>`` "
"service to the service container that is used by the ``IOptions<TOption>`` "
"service to provide the configured options to the application or framework. "
"If you want to configure your options some other way (ex. reading settings "
"from a data base) you can use the ``ConfigureOptions<TOptions>`` extension "
"method to you specify a custom ``IConfigureOptions<TOption>`` service "
"directly."
msgstr ""

#: ..\..\fundamentals\configuration.rst:149
msgid ""
"You can have multiple ``IConfigureOptions<TOption>`` services for the same "
"option type and they are all applied in order. In the :ref:`example "
"<options-example>` above value of Option1 and Option2 are both specified in "
"`appsettings.json`, but the value of Option1 is overridden by the configured"
" delegate."
msgstr ""

#: ..\..\fundamentals\configuration.rst:154
msgid "Writing custom providers"
msgstr ""

#: ..\..\fundamentals\configuration.rst:156
msgid ""
"In addition to using `the built-in configuration source providers "
"<https://github.com/aspnet/Configuration/tree/dev/src>`_, you can also write"
" your own. To do so, you simply inherit from ``ConfigurationSource``, and "
"populate the ``Data`` property with the settings from your configuration "
"source."
msgstr ""

#: ..\..\fundamentals\configuration.rst:159
msgid "Example: Entity Framework Settings"
msgstr ""

#: ..\..\fundamentals\configuration.rst:161
msgid ""
"You may wish to store some of your application's settings in a database, and"
" access them using Entity Framework (EF). There are many ways in which you "
"could choose to store such values, ranging from a simple table with a column"
" for the setting name and another column for the setting value, to having "
"separate columns for each setting value. In this example, I'm going to "
"create a simple configuration source that reads name-value pairs from a "
"database using EF."
msgstr ""

#: ..\..\fundamentals\configuration.rst:163
msgid ""
"To start off we'll define a simple ``ConfigurationValue`` entity for storing"
" configuration values in the database:"
msgstr ""

#: ..\..\fundamentals\configuration.rst:171
msgid ""
"We also need a ``ConfigurationContext`` to store and access the configured "
"values using EF:"
msgstr ""

#: ..\..\fundamentals\configuration.rst:179
msgid ""
"Next, create the custom configuration source by inheriting from "
"``ConfigurationSource``. The configuration data is loaded by overriding the "
"``Load`` method, which reads in all of the configuration data from the "
"configured database. For demonstration purposes, the configuration source "
"also takes care of initializing the database if it hasn't already been "
"created and populated:"
msgstr ""

#: ..\..\fundamentals\configuration.rst:187
msgid ""
"By convention we also add an ``AddEntityFramework`` extension method for "
"adding the configuration source:"
msgstr ""

#: ..\..\fundamentals\configuration.rst:195
msgid ""
"You can see an example of how to use this custom ``ConfigurationSource`` in "
"your application in the following example. Create a new "
"``ConfigurationBuilder`` to setup your configuration sources. To add the "
"``EntityFrameworkConfigurationSource`` you first need to specify the data "
"provider and connection string. How should you configure the connection "
"string? Using configuration of course! Add a *appsettings.json* file as a "
"configuration source to bootstrap setting up the "
"``EntityFrameworkConfigurationSource``. By reusing the same "
"``ConfigurationBuilder`` any settings specified in the database will "
"override settings specified in *appsettings.json*:"
msgstr ""

#: ..\..\fundamentals\configuration.rst:203
msgid "Run the application to see the configured values:"
msgstr ""

#: ..\..\fundamentals\configuration.rst:208
msgid "Summary"
msgstr ""

#: ..\..\fundamentals\configuration.rst:210
msgid ""
"ASP.NET 5 provides a very flexible configuration model that supports a "
"number of different file-based options, as well as command-line, in-memory, "
"and environment variables. It works seamlessly with the options model so "
"that you can inject strongly typed settings into your application or "
"framework. You can create your own custom configuration source providers as "
"well, which can work with or replace the built-in providers, allowing for "
"extreme flexibility."
msgstr ""
