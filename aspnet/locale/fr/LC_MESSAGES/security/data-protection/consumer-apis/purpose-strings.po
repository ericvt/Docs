#
msgid ""
msgstr ""
"Project-Id-Version: ASP.NET 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-12 14:35-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:4
msgid "Purpose Strings"
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:6
msgid ""
"Components which consume IDataProtectionProvider must pass a unique "
"*purposes* parameter to the CreateProtector method. The purposes *parameter*"
" is inherent to the security of the data protection system, as it provides "
"isolation between cryptographic consumers, even if the root cryptographic "
"keys are the same."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:8
msgid ""
"When a consumer specifies a purpose, the purpose string is used along with "
"the root cryptographic keys to derive cryptographic subkeys unique to that "
"consumer. This isolates the consumer from all other cryptographic consumers "
"in the application: no other component can read its payloads, and it cannot "
"read any other component's payloads. This isolation also renders infeasible "
"entire categories of attack against the component."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:12
msgid ""
"In the diagram above IDataProtector instances A and B **cannot** read each "
"other's payloads, only their own."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:14
msgid ""
"The purpose string doesn't have to be secret. It should simply be unique in "
"the sense that no other well-behaved component will ever provide the same "
"purpose string."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:17
msgid ""
"Using the namespace and type name of the component consuming the data "
"protection APIs is a good rule of thumb, as in practice this information "
"will never conflict."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:19
msgid ""
"A Contoso-authored component which is responsible for minting bearer tokens "
"might use Contoso.Security.BearerToken as its purpose string. Or - even "
"better - it might use Contoso.Security.BearerToken.v1 as its purpose string."
" Appending the version number allows a future version to use "
"Contoso.Security.BearerToken.v2 as its purpose, and the different versions "
"would be completely isolated from one another as far as payloads go."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:21
msgid ""
"Since the purposes parameter to CreateProtector is a string array, the above"
" could have been instead specified as [ \"Contoso.Security.BearerToken\", "
"\"v1\" ]. This allows establishing a hierarchy of purposes and opens up the "
"possibility of multi-tenancy scenarios with the data protection system."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:25
msgid ""
"Components should not allow untrusted user input to be the sole source of "
"input for the purposes chain."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:27
msgid ""
"For example, consider a component Contoso.Messaging.SecureMessage which is "
"responsible for storing secure messages. If the secure messaging component "
"were to call CreateProtector([ username ]), then a malicious user might "
"create an account with username \"Contoso.Security.BearerToken\" in an "
"attempt to get the component to call CreateProtector([ "
"\"Contoso.Security.BearerToken\" ]), thus inadvertently causing the secure "
"messaging system to mint payloads that could be perceived as authentication "
"tokens."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:29
msgid ""
"A better purposes chain for the messaging component would be "
"CreateProtector([ \"Contoso.Messaging.SecureMessage\", \"User: username\" "
"]), which provides proper isolation."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:31
msgid ""
"The isolation provided by and behaviors of IDataProtectionProvider, "
"IDataProtector, and purposes are as follows:"
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:33
msgid ""
"For a given IDataProtectionProvider object, the CreateProtector method will "
"create an IDataProtector object uniquely tied to both the "
"IDataProtectionProvider object which created it and the purposes parameter "
"which was passed into the method."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:34
msgid ""
"The purpose parameter must not be null. (If purposes is specified as an "
"array, this means that the array must not be of zero length and all elements"
" of the array must be non-null.) An empty string purpose is technically "
"allowed but is discouraged."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:35
msgid ""
"Two purposes arguments are equivalent if and only if they contain the same "
"strings (using an ordinal comparer) in the same order. A single purpose "
"argument is equivalent to the corresponding single-element purposes array."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:36
msgid ""
"Two IDataProtector objects are equivalent if and only if they are created "
"from equivalent IDataProtectionProvider objects with equivalent purposes "
"parameters."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:37
msgid ""
"For a given IDataProtector object, a call to Unprotect(protectedData) will "
"return the original unprotectedData if and only if protectedData := "
"Protect(unprotectedData) for an equivalent IDataProtector object."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\purpose-strings.rst:40
msgid ""
"We're not considering the case where some component intentionally chooses a "
"purpose string which is known to conflict with another component. Such a "
"component would essentially be considered malicious, and this system is not "
"intended to provide security guarantees in the event that malicious code is "
"already running inside of the worker process."
msgstr ""
