#
msgid ""
msgstr ""
"Project-Id-Version: ASP.NET 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-12 14:35-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\dnx\projects.rst:2
msgid "Working with DNX Projects"
msgstr ""

#: ..\..\dnx\projects.rst:4
msgid ""
"DNX projects are used to build and run .NET applications for Windows, Mac "
"and Linux. This article describes how you can create, build, run and manage "
"DNX projects"
msgstr ""

#: ..\..\dnx\projects.rst:15
msgid "In this article:"
msgstr ""

#: ..\..\dnx\projects.rst:7
msgid "`Creating a new project`_"
msgstr ""

#: ..\..\dnx\projects.rst:8
msgid "`Targeting frameworks`_"
msgstr ""

#: ..\..\dnx\projects.rst:9
msgid "`Adding dependencies`_"
msgstr ""

#: ..\..\dnx\projects.rst:10
msgid "`Restoring packages`_"
msgstr ""

#: ..\..\dnx\projects.rst:11
msgid "`Using commands`_"
msgstr ""

#: ..\..\dnx\projects.rst:12
msgid "`Running your app`_"
msgstr ""

#: ..\..\dnx\projects.rst:13
msgid "`Building`_"
msgstr ""

#: ..\..\dnx\projects.rst:14
msgid "`Publishing`_"
msgstr ""

#: ..\..\dnx\projects.rst:15
msgid "`Scripts`_"
msgstr ""

#: ..\..\dnx\projects.rst:18
msgid "Creating a new project"
msgstr ""

#: ..\..\dnx\projects.rst:20
msgid ""
"At its simplest form, a DNX project is a **project.json** file along with a "
"code file::"
msgstr ""

#: ..\..\dnx\projects.rst:26
msgid ""
"There are two mandatory conditions for a project. The *project.json* file "
"must contain valid json, where brackets *{ }* are used inside the file, and "
"that your *program.cs* file contains valid C#."
msgstr ""

#: ..\..\dnx\projects.rst:28
msgid ""
"The presence of a *project.json* file defines a DNX project. It is the "
"*project.json* file that contains all the information that DNX needs to run "
"and package your project. For additional details, including the "
"*project.json* file schema, see `Project.json "
"<https://github.com/aspnet/Home/wiki/Project.json-file>`_."
msgstr ""

#: ..\..\dnx\projects.rst:30
msgid ""
"When using some editors there are other files that you'll see. For instance,"
" when using Visual Studio you may see a .xproj file. These other types of "
"files are requirements of their specific tool, but are not a requirement of "
"DNX. The .xproj file type, for example, is an MSBuild file that is used by "
"Visual Studio and keeps information that is important to Visual Studio, but "
"this type of file does not impact DNX."
msgstr ""

#: ..\..\dnx\projects.rst:33
msgid "Targeting frameworks"
msgstr ""

#: ..\..\dnx\projects.rst:35
msgid ""
"One of the sections you can add to the *project.json* is the ``frameworks`` "
"section. The ``frameworks`` section looks like this:"
msgstr ""

#: ..\..\dnx\projects.rst:46
msgid ""
"Each of the values in the ``frameworks`` section of the *project.json* file "
"is a framework that your project will compile. The above snippet will build "
"for the full .NET Framework (dnx451) and .NET Core (dnxcore50)."
msgstr ""

#: ..\..\dnx\projects.rst:48
msgid ""
"If you pack this project, using ``dnu pack`` then you will get a NuGet "
"package that looks like the following:"
msgstr ""

#: ..\..\dnx\projects.rst:52
msgid ""
"Notice that the ``nupkg`` has a folder for each of the frameworks you "
"specified, allowing this NuGet package to work on any of the frameworks. You"
" can also specify a .NET Portable profile by using the full name of that "
"profile, for example:"
msgstr ""

#: ..\..\dnx\projects.rst:63
msgid ""
"With the above ``frameworks`` section, you'll generate a package with a "
"*portable-net45+win* folder that will be used when running on platforms that"
" match that portable profile."
msgstr ""

#: ..\..\dnx\projects.rst:66
msgid "Adding dependencies"
msgstr ""

#: ..\..\dnx\projects.rst:68
msgid ""
"You manage the dependencies of your application with the ``dependencies`` "
"section of your *project.json* file. The dependencies are defined by name "
"and version, where the runtime loaders determine what should be loaded."
msgstr ""

#: ..\..\dnx\projects.rst:78
msgid ""
"The above *project.json* section tells DNX that you depend upon "
"``Microsoft.AspNet.Mvc``, which means you also depend on everything that MVC"
" depends on."
msgstr ""

#: ..\..\dnx\projects.rst:80
msgid "The schema for dependency types adheres to following pattern:"
msgstr ""

#: ..\..\dnx\projects.rst:103
msgid ""
"For additional information about how dependency versions are chosen, see "
"`Dependency Resolution <https://github.com/aspnet/Home/wiki/Dependency-"
"Resolution>`_."
msgstr ""

#: ..\..\dnx\projects.rst:106
msgid "Package dependencies"
msgstr ""

#: ..\..\dnx\projects.rst:108
msgid ""
"The .NET Development Utility (DNU) is responsible for all operations "
"involving packages in your application. You use the **Install** command to "
"download a package based on the package id and add it to your application::"
msgstr ""

#: ..\..\dnx\projects.rst:112
msgid ""
"For a list of usage, arguments, and options of the ``install`` command, "
"enter the following in the command windows::"
msgstr ""

#: ..\..\dnx\projects.rst:116
msgid ""
"For more information about ``dnu`` commands, see `.NET Development Utility "
"(DNU) <https://github.com/aspnet/Home/wiki/DNX-utility>`_."
msgstr ""

#: ..\..\dnx\projects.rst:118
msgid ""
"The more common way of installing packages is to just edit the "
"*project.json* file. Editors like Visual Studio provide IntelliSense for all"
" packages, making editing the file far easier than running ``dnu install``. "
"However, you can use ``dnu install`` if you prefer."
msgstr ""

#: ..\..\dnx\projects.rst:121
msgid "Assembly references"
msgstr ""

#: ..\..\dnx\projects.rst:123
msgid ""
"You can also specify a list of framework assemblies for some frameworks:"
msgstr ""

#: ..\..\dnx\projects.rst:137
msgid ""
"Generally, you use this frameworkAssemblies section when you want to depend "
"on an assembly that is: - In the Global Assembly Cache (GAC) - Part of the "
"framework you are targeting"
msgstr ""

#: ..\..\dnx\projects.rst:141
msgid ""
"The *frameworkAssemblies* section is separate from the rest of the "
"dependencies list to remove the possibility of accidentally depending on a "
"NuGet package that happens to have the same name as a .NET Framework "
"assembly."
msgstr ""

#: ..\..\dnx\projects.rst:144
msgid "Project references"
msgstr ""

#: ..\..\dnx\projects.rst:146
msgid ""
"The *global.json* file is used to configure all the projects within a "
"directory. It includes just two default sections, the ``projects`` section "
"and the ``sdk`` section."
msgstr ""

#: ..\..\dnx\projects.rst:159
msgid ""
"The ``projects`` property designates which folders contain source code for "
"the solution. By default, the project structure places source files in a "
"*src* folder, allowing build artifacts to be placed in a sibling folder, "
"making it easier to exclude such things from source control."
msgstr ""

#: ..\..\dnx\projects.rst:162
msgid "Specifying required SDK version"
msgstr ""

#: ..\..\dnx\projects.rst:164
msgid ""
"The ``sdk`` property specifies the version of DNX (.NET Execution "
"Environment) that Visual Studio will use when opening the solution. Itâ€™s set"
" in the *global.json* file, rather than in *project.json* file, to avoid "
"scenarios where different projects within a solution are targeting different"
" versions of the SDK."
msgstr ""

#: ..\..\dnx\projects.rst:166
msgid ""
"The SDK version of *global.json* does not determine DNX version used when "
"run from the command line. You will still need to use DNVM to select the "
"correct DNX version."
msgstr ""

#: ..\..\dnx\projects.rst:169
msgid "Referencing non-DNX projects"
msgstr ""

#: ..\..\dnx\projects.rst:171
msgid ""
"You can use Visual Studio to add a reference to a non-DNX project by using "
"the **Add Reference** dialog box. This will add a *project.json* file to "
"your solution at the root folder which represents the referenced project."
msgstr ""

#: ..\..\dnx\projects.rst:174
msgid "Framework-specific dependencies"
msgstr ""

#: ..\..\dnx\projects.rst:176
msgid "You can also add dependencies for a particular framework like this:"
msgstr ""

#: ..\..\dnx\projects.rst:191
msgid ""
"In the above example, the ``System.Console`` dependency is only needed for "
"the *dnxcore50* target, not *dnx451*. It is often the case that you will "
"have extra dependencies on Core CLR, because there are packages that you "
"need to depend on in Core CLR that are part of .NET 4.5.x."
msgstr ""

#: ..\..\dnx\projects.rst:193
msgid ""
"While it is technically true that you do not need the ``System.Console`` "
"package on .NET 4.5.1, it also doesn't matter if you add it as a top level "
"dependency. Each of the ``System.*`` packages will work as a top level "
"dependency. So, you don't always have to have this separation. You could add"
" ``System.Console`` as a top level dependency and it will not impact your "
"application when on .NET 4.5.1."
msgstr ""

#: ..\..\dnx\projects.rst:196
msgid "Restoring packages"
msgstr ""

#: ..\..\dnx\projects.rst:198
msgid ""
"The .NET Development Utility (DNU) wraps the functionality of NuGet to do "
"package restore, which means that it uses the *NuGet.config* file to "
"determine where to download the package. If you want to get packages from "
"somewhere other than NuGet.org, you can edit your NuGet.config."
msgstr ""

#: ..\..\dnx\projects.rst:200
msgid ""
"For instructions about how to get development builds of the latest ASP.NET "
"and DNX packages, see `Configuring the feed used by dnu to restore packages "
"<https://github.com/aspnet/Home/wiki/Configuring-the-feed-used-by-dnu-to-"
"restore-packages>`_."
msgstr ""

#: ..\..\dnx\projects.rst:203
msgid "Using DNU Restore"
msgstr ""

#: ..\..\dnx\projects.rst:205
msgid ""
"The restore command will look at the dependencies listed in the "
"*project.json* file and download them, adding them to your app's packages "
"directory. It downloads the entire graph of dependencies, even though you "
"only explicitly declare the top level dependency that you directly require. "
"It uses NuGet internally to download packages."
msgstr ""

#: ..\..\dnx\projects.rst:207
msgid ""
"The following is an example of using the ``restore`` command from the "
"command window, where the command is executed from the folder containing the"
" application (including the *project.json* file)::"
msgstr ""

#: ..\..\dnx\projects.rst:212
msgid "Project lock file"
msgstr ""

#: ..\..\dnx\projects.rst:214
msgid ""
"When doing a package restore, DNU builds up a great deal of information "
"about the dependencies of your application, this information is persisted to"
" disk in the *project.lock.json* file."
msgstr ""

#: ..\..\dnx\projects.rst:216
msgid ""
"DNX reads the lock file when running your application instead of rebuilding "
"all the information that the DNU already generated. To understand the reason"
" for that, imagine what DNX has to do without the lock file:"
msgstr ""

#: ..\..\dnx\projects.rst:218
msgid "Find each dependency listed in the *project.json* file."
msgstr ""

#: ..\..\dnx\projects.rst:219
msgid "Open the nuspec of each package and get all of their dependencies."
msgstr ""

#: ..\..\dnx\projects.rst:220
msgid "Repeat step 2 for each dependency until it has the entire graph."
msgstr ""

#: ..\..\dnx\projects.rst:221 ..\..\dnx\projects.rst:226
msgid "Load all the dependencies."
msgstr ""

#: ..\..\dnx\projects.rst:223
msgid "By using the lock file, this process is reduced to:"
msgstr ""

#: ..\..\dnx\projects.rst:225
msgid "Read the lock file."
msgstr ""

#: ..\..\dnx\projects.rst:228
msgid "There is significantly less disk IO involved in the second list."
msgstr ""

#: ..\..\dnx\projects.rst:230
msgid ""
"The lock file ensures that after you run ``dnu restore``, you have a fixed "
"set of packages that you are referencing. When restoring, the DNU generates "
"the lock file which specifies the exact versions that your project will use."
" This way, versions only get modified when you run ``dnu restore``, not "
"during run-time. Restoring also ends up improving performance at run-time "
"since DNX no longer has to probe the packages directory to find the right "
"version to use, DNX just does what the lock file instructs DNX to do."
msgstr ""

#: ..\..\dnx\projects.rst:232
msgid ""
"The primary advantage of the lock file is to prevent the application from be"
" affected by someone else installing a package into your global install "
"directory. For this reason, the lock file is mandatory to run. If you do not"
" have a lock file, DNX will fail to load your application."
msgstr ""

#: ..\..\dnx\projects.rst:234
msgid ""
"There is a field in the lock file, ``locked``, which can be set to true "
"either manually or via ``dnu restore â€”lock``. Setting this field to ``true``"
" specifies that ``dnu restore`` will just download the versions specified in"
" the lock file and will not do any dependency graph walking or version "
"selection. You can run ``dnu restore â€”lock`` to generate a locked lock file."
" Future restores will not change your installed version, unless you use "
"``dnu restore --unlock`` to remove the lock. You could lock your lock file "
"and check it in on a release branch to ensure that you always get the exact "
"version you expect, but leave it unlocked ()and ignored by source control on"
" development branch(es)."
msgstr ""

#: ..\..\dnx\projects.rst:237
msgid "Specifying an alternative package locations"
msgstr ""

#: ..\..\dnx\projects.rst:239
msgid ""
"You can add ``nupkg`` (NuGet packages) and ``source`` packages (not on a "
"NuGet feed) to a project. To specify the location of these packages you must"
" include the path to the NuGet package or to a packages folder, such as::"
msgstr ""

#: ..\..\dnx\projects.rst:243 ..\..\dnx\projects.rst:558
msgid "For additional details, run the help command::"
msgstr ""

#: ..\..\dnx\projects.rst:248
msgid "Using commands"
msgstr ""

#: ..\..\dnx\projects.rst:250
msgid ""
"A command is an alias for a package to use as an entry point and also "
"provides an initial set of arguments. You can define commands in your "
"*project.json* file:"
msgstr ""

#: ..\..\dnx\projects.rst:280
msgid ""
"The commands are a set of arguments that will be passed to DNX. The entry-"
"point provided by a command should either be the name of a project within "
"your solution, or an assembly provided by a package that your application "
"depends on."
msgstr ""

#: ..\..\dnx\projects.rst:283
msgid "Running your app"
msgstr ""

#: ..\..\dnx\projects.rst:285
msgid ""
"By specifying a command as an argument that is passed to DNX, you can run "
"your app locally. For instance, you can use the ``kestrel`` command "
"(specified in the ``commands`` section of your project's *project.json* "
"file) to run a Web Application as follows::"
msgstr ""

#: ..\..\dnx\projects.rst:289
msgid ""
"To view the running web application, you can open a browser and navigate to "
"the path specified in the *project.json* file::"
msgstr ""

#: ..\..\dnx\projects.rst:293
msgid ""
"To run a Console Application using the Command Window from the project "
"directory, you can use the following statement::"
msgstr ""

#: ..\..\dnx\projects.rst:297
msgid ""
"To run a Web API application, you can use the following command from the "
"Command Window::"
msgstr ""

#: ..\..\dnx\projects.rst:301
msgid ""
"In the case of the *web* command, the ``Microsoft.AspNet.Hosting`` assembly "
"has a ``Main`` entry point method that is called whenever you run the web "
"command. The rest of the values in the *web* command are used by the hosting"
" assembly to host your web application."
msgstr ""

#: ..\..\dnx\projects.rst:303
msgid ""
"To run commands out of a different project, you can use the ``--project`` "
"option. The short form of ``--project`` is ``--p``. For example::"
msgstr ""

#: ..\..\dnx\projects.rst:307
msgid ""
"For a Console Application, the entry point is the ``Main`` method of the "
"``Program`` class. For more information about the Web Application startup "
"process, see :doc:`/fundamentals/startup`."
msgstr ""

#: ..\..\dnx\projects.rst:310
msgid ""
"When you run your app, you can specify whether to compile in Debug mode or "
"in Release mode. You can specify the ``configuration`` option as follows::"
msgstr ""

#: ..\..\dnx\projects.rst:314
msgid ""
"For more compilation related information, see :ref:`dnx-projects-"
"CompiliationSettings`)."
msgstr ""

#: ..\..\dnx\projects.rst:317
msgid "Building"
msgstr ""

#: ..\..\dnx\projects.rst:319
msgid ""
"You use DNX projects to build NuGet packages. You can use the .NET "
"Development Utility (DNU) to build, package, and publish DNX projects."
msgstr ""

#: ..\..\dnx\projects.rst:322
msgid "DNU build"
msgstr ""

#: ..\..\dnx\projects.rst:324
msgid ""
"The *project.json* file defines your package metadata, your project "
"dependencies, and which frameworks that you want to target your build."
msgstr ""

#: ..\..\dnx\projects.rst:326
msgid ""
"All the files in the folder are by default part of the project unless "
"explicitly excluded in *project.json*. You specify which frameworks to "
"target by using the \"frameworks\" property. DNX will cross-compile for each"
" specified framework and create the corresponding *lib* folder in the built "
"NuGet package."
msgstr ""

#: ..\..\dnx\projects.rst:328
msgid "Building a project produces the binary outputs for the project."
msgstr ""

#: ..\..\dnx\projects.rst:333
msgid "Compilation settings"
msgstr ""

#: ..\..\dnx\projects.rst:335
msgid ""
"Compilation settings allow you to pass options through to the compiler. The "
"language version can be set in this section of the *project.json* file, as "
"well as defines and other options."
msgstr ""

#: ..\..\dnx\projects.rst:348
msgid ""
"Configurations are named groups of compilation settings. There are two "
"default compilation settings, **Debug** and **Release**. You can override "
"these (or add more) by modifying to the configurations section in the "
"*project.json*."
msgstr ""

#: ..\..\dnx\projects.rst:368
msgid ""
"When building a DNX based application, such as by using ``dnu build`` or via"
" pack/publish with ``dnu pack`` or ``dnu publish``, you can pass "
"``--configuration <configuration>`` to have DNX use the named configuration."
msgstr ""

#: ..\..\dnx\projects.rst:370
msgid ""
"For a list of usage, arguments, and options of the ``build`` command, enter "
"the following in the command windows::"
msgstr ""

#: ..\..\dnx\projects.rst:375
msgid "Including/Excluding files"
msgstr ""

#: ..\..\dnx\projects.rst:377
msgid ""
"By default all code files in a directory containing a *project.json* are "
"included in the project. You can control this with the include/exclude "
"sections of the *project.json*."
msgstr ""

#: ..\..\dnx\projects.rst:379
msgid ""
"The most common sections that you will see for including and excluding files"
" are:"
msgstr ""

#: ..\..\dnx\projects.rst:396
msgid "The *compile* section specifies that only .cs files will be compiled."
msgstr ""

#: ..\..\dnx\projects.rst:398
msgid ""
"The *exclude* section excludes any files in the ``node_modules`` and "
"``bower_components`` directories. Even if sections have .cs extensions."
msgstr ""

#: ..\..\dnx\projects.rst:400
msgid ""
"The *publishExclude* section allows you to exclude files from the publish "
"output of your project. In this example, all *.xproj*, *.user*, and "
"*.vspscc* files from the output of the publish command."
msgstr ""

#: ..\..\dnx\projects.rst:402
msgid ""
"Most sections of the *project.json* file that deal with files allow `glob "
"patterns <https://en.wikipedia.org/wiki/Glob_programming>`_, which are often"
" called wildcards."
msgstr ""

#: ..\..\dnx\projects.rst:405
msgid "List of include/exclude properties"
msgstr ""

#: ..\..\dnx\projects.rst:408 ..\..\dnx\projects.rst:445
msgid "name"
msgstr ""

#: ..\..\dnx\projects.rst:408 ..\..\dnx\projects.rst:445
msgid "default value"
msgstr ""

#: ..\..\dnx\projects.rst:408 ..\..\dnx\projects.rst:445
msgid "remark"
msgstr ""

#: ..\..\dnx\projects.rst:410
msgid "compile"
msgstr ""

#: ..\..\dnx\projects.rst:412
msgid "compileExclude"
msgstr ""

#: ..\..\dnx\projects.rst:414
msgid "content"
msgstr ""

#: ..\..\dnx\projects.rst:414
msgid "``**/*``"
msgstr ""

#: ..\..\dnx\projects.rst:416
msgid "contentExclude"
msgstr ""

#: ..\..\dnx\projects.rst:418
msgid "preprocess"
msgstr ""

#: ..\..\dnx\projects.rst:418
msgid "``compiler/preprocess/**/*.cs``"
msgstr ""

#: ..\..\dnx\projects.rst:420
msgid "preprocessExclude"
msgstr ""

#: ..\..\dnx\projects.rst:422
msgid "resource"
msgstr ""

#: ..\..\dnx\projects.rst:422
msgid "``compiler/preprocess/resources/**/*``"
msgstr ""

#: ..\..\dnx\projects.rst:424
msgid "resourceExclude"
msgstr ""

#: ..\..\dnx\projects.rst:426
msgid "shared"
msgstr ""

#: ..\..\dnx\projects.rst:426
msgid "``compiler/shared/**/*.cs``"
msgstr ""

#: ..\..\dnx\projects.rst:428
msgid "sharedExclude"
msgstr ""

#: ..\..\dnx\projects.rst:430
msgid "publishExclude"
msgstr ""

#: ..\..\dnx\projects.rst:430
msgid "``bin/**;obj/**;**/.*/**``"
msgstr ""

#: ..\..\dnx\projects.rst:432
msgid "exclude"
msgstr ""

#: ..\..\dnx\projects.rst:437
msgid "Advanced Properties"
msgstr ""

#: ..\..\dnx\projects.rst:439
msgid ""
"In addition to the above table there are some extra properties that you will"
" not use as often."
msgstr ""

#: ..\..\dnx\projects.rst:441
msgid ""
"The names ending in BuiltIn control the built in values of their associated "
"key. E.g. *compile* always has the value of *compileBuiltIn* appended to it."
msgstr ""

#: ..\..\dnx\projects.rst:442
msgid ""
"The names ending in Files are ways to specify an individual file, without "
"globbing. These are here so that you can do things like \"exclude all files "
"in folder x except this one file that I care about\"."
msgstr ""

#: ..\..\dnx\projects.rst:447
msgid "compileBuiltIn"
msgstr ""

#: ..\..\dnx\projects.rst:447
msgid "``**/*.cs``"
msgstr ""

#: ..\..\dnx\projects.rst:447
msgid "Concatenated to compile."
msgstr ""

#: ..\..\dnx\projects.rst:449
msgid "excludeBuiltIn"
msgstr ""

#: ..\..\dnx\projects.rst:449
msgid "``bin/**;obj/**;*.kproj``"
msgstr ""

#: ..\..\dnx\projects.rst:451
msgid "compileFiles"
msgstr ""

#: ..\..\dnx\projects.rst:451 ..\..\dnx\projects.rst:453
#: ..\..\dnx\projects.rst:455
msgid "Wildcard is not allowed"
msgstr ""

#: ..\..\dnx\projects.rst:453
msgid "contentFiles"
msgstr ""

#: ..\..\dnx\projects.rst:455
msgid "preprocessFiles"
msgstr ""

#: ..\..\dnx\projects.rst:457
msgid "resourceFiles"
msgstr ""

#: ..\..\dnx\projects.rst:457 ..\..\dnx\projects.rst:459
msgid "Wildecard is not allowed"
msgstr ""

#: ..\..\dnx\projects.rst:459
msgid "sharedFiles"
msgstr ""

#: ..\..\dnx\projects.rst:463
msgid "Precedence"
msgstr ""

#: ..\..\dnx\projects.rst:465
msgid "The sequence of searching are:"
msgstr ""

#: ..\..\dnx\projects.rst:467
msgid "Gather files from include patterns"
msgstr ""

#: ..\..\dnx\projects.rst:468
msgid "Exclude files from ignore patterns"
msgstr ""

#: ..\..\dnx\projects.rst:469
msgid "Exclude files from includes of mutually exclusive types (see below)"
msgstr ""

#: ..\..\dnx\projects.rst:470
msgid "Adding individually specified files"
msgstr ""

#: ..\..\dnx\projects.rst:472
msgid ""
"The following describes the exact lists that are built up with the following"
" notation:"
msgstr ""

#: ..\..\dnx\projects.rst:474
msgid "\\+ means included"
msgstr ""

#: ..\..\dnx\projects.rst:475
msgid "\\- means excluded"
msgstr ""

#: ..\..\dnx\projects.rst:476
msgid "glob() means the values are used in the globbing algorithm."
msgstr ""

#: ..\..\dnx\projects.rst:510
msgid "Sharing files"
msgstr ""

#: ..\..\dnx\projects.rst:512
msgid ""
"The *shared* section of the *project.json* is designed to allow you to "
"create a project that shares its source with other projects, rather than "
"being compiled to a binary."
msgstr ""

#: ..\..\dnx\projects.rst:520
msgid ""
"When you have shared source in your project it will generate a NuGet package"
" with a directory called *shared* containing the shared files. Depending on "
"this package will cause DNX to compile the code files that are in the shared"
" directory as if they were part of your project."
msgstr ""

#: ..\..\dnx\projects.rst:524
msgid ""
"Because you are adding to the source of a project that depends on your "
"shared code, it is recommended that all the shared code be internal. Having "
"public surface area in the types you are adding to another project is likely"
" to cause problems in the future."
msgstr ""

#: ..\..\dnx\projects.rst:528
msgid ""
"By convention shared project names should end in sources. "
"``Microsoft.AspNet.Common.Sources``, **not** ``Microsoft.AspNet.Common``."
msgstr ""

#: ..\..\dnx\projects.rst:531
msgid "Per framework compilation"
msgstr ""

#: ..\..\dnx\projects.rst:533
msgid ""
"You can target a specific framework to build for your application by using "
"the ``--framework`` option when using the ``build`` command. For example::"
msgstr ""

#: ..\..\dnx\projects.rst:538
msgid "Packaging"
msgstr ""

#: ..\..\dnx\projects.rst:540
msgid ""
"You use the ``dnu pack`` command to build NuGet packages to a given "
"directory for your project."
msgstr ""

#: ..\..\dnx\projects.rst:543
msgid "DNU pack"
msgstr ""

#: ..\..\dnx\projects.rst:545
msgid ""
"You can pack a project by specifying the project or default to the current "
"directory. In addition, you can specify the following as options:"
msgstr ""

#: ..\..\dnx\projects.rst:547
msgid "A list of target frameworks to build."
msgstr ""

#: ..\..\dnx\projects.rst:548
msgid "A list of configurations to build."
msgstr ""

#: ..\..\dnx\projects.rst:549
msgid "The output directory."
msgstr ""

#: ..\..\dnx\projects.rst:550
msgid "An output of dependencies."
msgstr ""

#: ..\..\dnx\projects.rst:551
msgid ""
"Whether to show output such as the source or destination of the nupkgs."
msgstr ""

#: ..\..\dnx\projects.rst:552
msgid "A output of help information."
msgstr ""

#: ..\..\dnx\projects.rst:554
msgid ""
"For example, you can pack the current project based on the current "
"directory::"
msgstr ""

#: ..\..\dnx\projects.rst:563
msgid "Adding package metadata"
msgstr ""

#: ..\..\dnx\projects.rst:565
msgid ""
"Project metadata is information such as the version of your app, author, "
"etc."
msgstr ""

#: ..\..\dnx\projects.rst:567
msgid ""
"To specify this in the *project.json* file you create a key for each of the "
"metadata attributes you care about:"
msgstr ""

#: ..\..\dnx\projects.rst:577
msgid ""
"version: The version of the NuGet package and assemblies generated if you "
"pack/publish your application."
msgstr ""

#: ..\..\dnx\projects.rst:578
msgid ""
"authors: A JSON array of the authors and owners section of the NuGet "
"packages nuspec"
msgstr ""

#: ..\..\dnx\projects.rst:579
msgid "description: A long description of the NuGet package."
msgstr ""

#: ..\..\dnx\projects.rst:581
msgid ""
"Additional optional metadata that can be put into the project.json file:"
msgstr ""

#: ..\..\dnx\projects.rst:583
msgid "copyright: Copyright details for the NuGet package."
msgstr ""

#: ..\..\dnx\projects.rst:584
msgid "projectUrl: A URL for the home page of the NuGet package."
msgstr ""

#: ..\..\dnx\projects.rst:585
msgid "licenseUrl: A link to the license that the NuGet package is under."
msgstr ""

#: ..\..\dnx\projects.rst:586
msgid ""
"requireLicenseAcceptance: A Boolean value that specifies whether the client "
"needs to ensure that the package license (described by licenseUrl) is "
"accepted before the NuGet package is installed."
msgstr ""

#: ..\..\dnx\projects.rst:587
msgid "language: The locale ID for the NuGet package, such as en-us."
msgstr ""

#: ..\..\dnx\projects.rst:588
msgid ""
"tags: A JSON array of tags and keywords that describe the NuGet package."
msgstr ""

#: ..\..\dnx\projects.rst:589
msgid "title: The human-friendly title of the NuGet package."
msgstr ""

#: ..\..\dnx\projects.rst:592
msgid "Publishing"
msgstr ""

#: ..\..\dnx\projects.rst:594
msgid ""
"You use the ``dnu publish`` command to package your application into a self-"
"contained directory that can be launched. It will create the following "
"directory structure: - output/ - output/packages - output/appName - "
"output/commandName.cmd"
msgstr ""

#: ..\..\dnx\projects.rst:600
msgid ""
"The packages directory contains all the packages your application needs to "
"run."
msgstr ""

#: ..\..\dnx\projects.rst:602
msgid ""
"The appName directory will contain all of your applications code, if you "
"have project references they will appear as their own directory with code at"
" this level as well."
msgstr ""

#: ..\..\dnx\projects.rst:604
msgid ""
"The publish command will also hoist any commands from your *project.json* "
"file into batch files. Running any of these commands is the same as running"
"  ``dnx <command>``. For a list of usage, arguments, and options of the "
"``publish`` command, enter the following in the command windows::"
msgstr ""

#: ..\..\dnx\projects.rst:609
msgid "Scripts"
msgstr ""

#: ..\..\dnx\projects.rst:611
msgid ""
"The scripts section of the *project.json* allows you to hook into events "
"that happen as you work on your application:"
msgstr ""

#: ..\..\dnx\projects.rst:629
msgid ""
"Most of these are fairly self-explanatory and each matches an explicit "
"command in the DNU. Except for *prepare*. *Prepare* runs both after a "
"restore and before a publish and is intended to be used to make sure "
"everything is ready for either development or publishing. For example, you "
"often need to make sure that you run all of your gulp tasks after you "
"restore packages, to make sure you get things like css copied from new bower"
" packages, and you also want to make sure that gulp is run before you "
"publish so that you are publishing the latest code generated from your "
"tasks."
msgstr ""

#: ..\..\dnx\projects.rst:631
msgid ""
"The values of the scripts are commands that will be run in your environment "
"as if you had opened a terminal and run them. For example, the following is "
"scaffolded when creating a new application in Visual Studio:"
msgstr ""

#: ..\..\dnx\projects.rst:643
msgid "Token substitution"
msgstr ""

#: ..\..\dnx\projects.rst:645
msgid ""
"There are also several tokens that will be replaced if they appear inside "
"the scripts value:"
msgstr ""

#: ..\..\dnx\projects.rst:648
msgid "Token"
msgstr ""

#: ..\..\dnx\projects.rst:648
msgid "Replaced with"
msgstr ""

#: ..\..\dnx\projects.rst:650
msgid "%project:Directory%"
msgstr ""

#: ..\..\dnx\projects.rst:650
msgid "The project directory"
msgstr ""

#: ..\..\dnx\projects.rst:651
msgid "%project:Name%"
msgstr ""

#: ..\..\dnx\projects.rst:651
msgid "The project name"
msgstr ""

#: ..\..\dnx\projects.rst:652
msgid "%project:Version%"
msgstr ""

#: ..\..\dnx\projects.rst:652
msgid "The project version"
msgstr ""

#: ..\..\dnx\projects.rst:655
msgid ""
"If any of the above tokens appear in the value of the script key they will "
"be replaced with the associated value."
msgstr ""

#: ..\..\dnx\projects.rst:658
msgid "Related Resources"
msgstr ""

#: ..\..\dnx\projects.rst:660
msgid ":doc:`/dnx/overview`"
msgstr ""

#: ..\..\dnx\projects.rst:661
msgid ""
"`Create an ASP.NET 5 web app in Visual Studio Code  "
"<https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-"
"web-app-using-vscode/>`_"
msgstr ""
