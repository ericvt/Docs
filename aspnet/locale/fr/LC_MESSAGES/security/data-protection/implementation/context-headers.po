#
msgid ""
msgstr ""
"Project-Id-Version: ASP.NET 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-12 14:35-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\security\data-protection\implementation\context-headers.rst:4
msgid "Context headers"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:7
msgid "Background and theory"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:9
msgid ""
"In the data protection system, a \"key\" means an object that can provide "
"authenticated encryption services. Each key is identified by a unique id (a "
"GUID), and it carries with it algorithmic information and entropic material."
" It is intended that each key carry unique entropy, but the system cannot "
"enforce that, and we also need to account for developers who might change "
"the key ring manually by modifying the algorithmic information of an "
"existing key in the key ring. To achieve our security requirements given "
"these cases the data protection system has a concept of `cryptographic "
"agility <http://research.microsoft.com/apps/pubs/default.aspx?id=121045>`_, "
"which allows securely using a single entropic value across multiple "
"cryptographic algorithms."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:11
msgid ""
"Most systems which support cryptographic agility do so by including some "
"identifying information about the algorithm inside the payload. The "
"algorithm's OID is generally a good candidate for this. However, one problem"
" that we ran into is that there are multiple ways to specify the same "
"algorithm: \"AES\" (CNG) and the managed Aes, AesManaged, "
"AesCryptoServiceProvider, AesCng, and RijndaelManaged (given specific "
"parameters) classes are all actually the same thing, and we'd need to "
"maintain a mapping of all of these to the correct OID. If a developer wanted"
" to provide a custom algorithm (or even another implementation of AES!), "
"he'd have to tell us its OID. This extra registration step makes system "
"configuration particularly painful."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:13
msgid ""
"Stepping back, we decided that we were approaching the problem from the "
"wrong direction. An OID tells you what the algorithm is, but we don't "
"actually care about this. If we need to use a single entropic value securely"
" in two different algorithms, it's not necessary for us to know what the "
"algorithms actually are. What we actually care about is how they behave. Any"
" decent symmetric block cipher algorithm is also a strong pseudorandom "
"permutation (PRP): fix the inputs (key, chaining mode, IV, plaintext) and "
"the ciphertext output will with overwhelming probability be distinct from "
"any other symmetric block cipher algorithm given the same inputs. Similarly,"
" any decent keyed hash function is also a strong pseudorandom function "
"(PRF), and given a fixed input set its output will overwhelmingly be "
"distinct from any other keyed hash function."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:15
msgid ""
"We use this concept of strong PRPs and PRFs to build up a context header. "
"This context header essentially acts as a stable thumbprint over the "
"algorithms in use for any given operation, and it provides the cryptographic"
" agility needed by the data protection system. This header is reproducible "
"and is used later as part of the :ref:`subkey derivation process <data-"
"protection-implementation-subkey-derivation>`. There are two different ways "
"to build the context header depending on the modes of operation of the "
"underlying algorithms."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:19
msgid "CBC-mode encryption + HMAC authentication"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:23
#: ..\..\security\data-protection\implementation\context-headers.rst:116
msgid "The context header consists of the following components:"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:25
msgid ""
"[16 bits] The value 00 00, which is a marker meaning \"CBC encryption + HMAC"
" authentication\"."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:26
#: ..\..\security\data-protection\implementation\context-headers.rst:119
msgid ""
"[32 bits] The key length (in bytes, big-endian) of the symmetric block "
"cipher algorithm."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:27
msgid ""
"[32 bits] The block size (in bytes, big-endian) of the symmetric block "
"cipher algorithm."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:28
msgid ""
"[32 bits] The key length (in bytes, big-endian) of the HMAC algorithm. "
"(Currently the key size always matches the digest size.)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:29
msgid ""
"[32 bits] The digest size (in bytes, big-endian) of the HMAC algorithm."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:30
msgid ""
"EncCBC(K\\ :sub:`E`, IV, \"\"), which is the output of the symmetric block "
"cipher algorithm given an empty string input and where IV is an all-zero "
"vector. The construction of K\\ :sub:`E` is described below."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:31
msgid ""
"MAC(K\\ :sub:`H`, \"\"), which is the output of the HMAC algorithm given an "
"empty string input. The construction of K\\ :sub:`H` is described below."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:33
msgid ""
"Ideally we could pass all-zero vectors for K\\ :sub:`E` and K\\ :sub:`H`. "
"However, we want to avoid the situation where the underlying algorithm "
"checks for the existence of weak keys before performing any operations "
"(notably DES and 3DES), which precludes using a simple or repeatable pattern"
" like an all-zero vector."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:35
msgid ""
"Instead, we use the NIST SP800-108 KDF in Counter Mode (see `NIST SP800-108 "
"<http://csrc.nist.gov/publications/nistpubs/800-108/sp800-108.pdf>`_, Sec. "
"5.1) with a zero-length key, label, and context and HMACSHA512 as the "
"underlying PRF. We derive | K\\ :sub:`E` | + | K\\ :sub:`H` | bytes of "
"output, then decompose the result into K\\ :sub:`E` and K\\ :sub:`H` "
"themselves. Mathematically, this is represented as follows."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:37
msgid ""
"( K\\ :sub:`E` || K\\ :sub:`H` ) = SP800_108_CTR(prf = HMACSHA512, key = "
"\"\", label = \"\", context = \"\")"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:40
msgid "Example: AES-192-CBC + HMACSHA256"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:42
msgid ""
"As an example, consider the case where the symmetric block cipher algorithm "
"is AES-192-CBC and the validation algorithm is HMACSHA256. The system would "
"generate the context header using the following steps."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:44
msgid ""
"First, let ( K\\ :sub:`E` || K\\ :sub:`H` ) = SP800_108_CTR(prf = "
"HMACSHA512, key = \"\", label = \"\", context = \"\"), where | K\\ :sub:`E` "
"| = 192 bits and | K\\ :sub:`H` | = 256 bits per the specified algorithms. "
"This leads to K\\ :sub:`E` = 5BB6..21DD and K\\ :sub:`H` = A04A..00A9 in the"
" example below::"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:51
msgid ""
"Next, compute Enc\\ :sub:`CBC` (K\\ :sub:`E`, IV, \"\") for AES-192-CBC "
"given IV = 0* and K\\ :sub:`E` as above."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:53
msgid "result := F474B1872B3B53E4721DE19C0841DB6F"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:55
msgid ""
"Next, compute MAC(K\\ :sub:`H`, \"\") for HMACSHA256 given K\\ :sub:`H` as "
"above."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:57
msgid ""
"result := D4791184B996092EE1202F36E8608FA8FBD98ABDFF5402F264B1D7211536220C"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:59
#: ..\..\security\data-protection\implementation\context-headers.rst:140
msgid "This produces the full context header below::"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:67
msgid ""
"This context header is the thumbprint of the authenticated encryption "
"algorithm pair (AES-192-CBC encryption + HMACSHA256 validation). The "
"components, as described :ref:`above <data-protection-implementation-"
"context-headers-cbc-components>` are:"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:69
#: ..\..\security\data-protection\implementation\context-headers.rst:105
msgid "the marker (00 00)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:70
#: ..\..\security\data-protection\implementation\context-headers.rst:106
msgid "the block cipher key length (00 00 00 18)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:71
#: ..\..\security\data-protection\implementation\context-headers.rst:151
msgid "the block cipher block size (00 00 00 10)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:72
msgid "the HMAC key length (00 00 00 20)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:73
msgid "the HMAC digest size (00 00 00 20)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:74
msgid "the block cipher PRP output (F4 74 - DB 6F) and"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:75
msgid "the HMAC PRF output (D4 79 - end)."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:78
msgid ""
"The CBC-mode encryption + HMAC authentication context header is built the "
"same way regardless of whether the algorithms implementations are provided "
"by Windows CNG or by managed SymmetricAlgorithm and KeyedHashAlgorithm "
"types. This allows applications running on different operating systems to "
"reliably produce the same context header even though the implementations of "
"the algorithms differ between OSes. (In practice, the KeyedHashAlgorithm "
"doesn't have to be a proper HMAC. It can be any keyed hash algorithm type.)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:81
msgid "Example: 3DES-192-CBC + HMACSHA1"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:83
msgid ""
"First, let ( K\\ :sub:`E` || K\\ :sub:`H` ) = SP800_108_CTR(prf = "
"HMACSHA512, key = \"\", label = \"\", context = \"\"), where | K\\ :sub:`E` "
"| = 192 bits and | K\\ :sub:`H` | = 160 bits per the specified algorithms. "
"This leads to K\\ :sub:`E` = A219..E2BB and K\\ :sub:`H` = DC4A..B464 in the"
" example below::"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:89
msgid ""
"Next, compute Enc\\ :sub:`CBC` (K\\ :sub:`E`, IV, \"\") for 3DES-192-CBC "
"given IV = 0* and K\\ :sub:`E` as above."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:91
msgid "result := ABB100F81E53E10E"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:93
msgid ""
"Next, compute MAC(K\\ :sub:`H`, \"\") for HMACSHA1 given K\\ :sub:`H` as "
"above."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:95
msgid "result := 76EB189B35CF03461DDF877CD9F4B1B4D63A7555"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:97
msgid ""
"This produces the full context header which is a thumbprint of the "
"authenticated encryption algorithm pair (3DES-192-CBC encryption + HMACSHA1 "
"validation), shown below::"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:103
#: ..\..\security\data-protection\implementation\context-headers.rst:146
msgid "The components break down as follows:"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:107
msgid "the block cipher block size (00 00 00 08)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:108
msgid "the HMAC key length (00 00 00 14)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:109
msgid "the HMAC digest size (00 00 00 14)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:110
msgid "the block cipher PRP output (AB B1 - E1 0E) and"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:111
msgid "the HMAC PRF output (76 EB - end)."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:114
msgid "Galois/Counter Mode encryption + authentication"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:118
msgid ""
"[16 bits] The value 00 01, which is a marker meaning \"GCM encryption + "
"authentication\"."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:120
msgid ""
"[32 bits] The nonce size (in bytes, big-endian) used during authenticated "
"encryption operations. (For our system, this is fixed at nonce size = 96 "
"bits.)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:121
msgid ""
"[32 bits] The block size (in bytes, big-endian) of the symmetric block "
"cipher algorithm. (For GCM, this is fixed at block size = 128 bits.)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:122
msgid ""
"[32 bits] The authentication tag size (in bytes, big-endian) produced by the"
" authenticated encryption function. (For our system, this is fixed at tag "
"size = 128 bits.)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:123
msgid ""
"[128 bits] The tag of Enc\\ :sub:`GCM` (K\\ :sub:`E`, nonce, \"\"), which is"
" the output of the symmetric block cipher algorithm given an empty string "
"input and where nonce is a 96-bit all-zero vector."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:125
msgid ""
"K\\ :sub:`E` is derived using the same mechanism as in the CBC encryption + "
"HMAC authentication scenario. However, since there is no K\\ :sub:`H` in "
"play here, we essentially have | K\\ :sub:`H` | = 0, and the algorithm "
"collapses to the below form."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:127
msgid ""
"K\\ :sub:`E` = SP800_108_CTR(prf = HMACSHA512, key = \"\", label = \"\", "
"context = \"\")"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:130
msgid "Example: AES-256-GCM"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:132
msgid ""
"First, let K\\ :sub:`E` = SP800_108_CTR(prf = HMACSHA512, key = \"\", label "
"= \"\", context = \"\"), where | K\\ :sub:`E` | = 256 bits."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:134
msgid ""
"K\\ :sub:`E` := "
"22BC6F1B171C08C4AE2F27444AF8FC8B3087A90006CAEA91FDCFB47C1B8733B8"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:136
msgid ""
"Next, compute the authentication tag of Enc\\ :sub:`GCM` (K\\ :sub:`E`, "
"nonce, \"\") for AES-256-GCM given nonce = 096 and K\\ :sub:`E` as above."
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:138
msgid "result := E7DCCE66DF855A323A6BB7BD7A59BE45"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:148
msgid "the marker (00 01)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:149
msgid "the block cipher key length (00 00 00 20)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:150
msgid "the nonce size (00 00 00 0C)"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:152
msgid "the authentication tag size (00 00 00 10) and"
msgstr ""

#: ..\..\security\data-protection\implementation\context-headers.rst:153
msgid "the authentication tag from running the block cipher (E7 DC - end)."
msgstr ""
