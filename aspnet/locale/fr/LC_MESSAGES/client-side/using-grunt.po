#
msgid ""
msgstr ""
"Project-Id-Version: ASP.NET 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-12 14:35-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\client-side\using-grunt.rst:2
msgid "Using Grunt"
msgstr ""

#: ..\..\client-side\using-grunt.rst:4
msgid "By `Noel Rice`_"
msgstr ""

#: ..\..\client-side\using-grunt.rst:6
msgid ""
"Grunt is a JavaScript task runner that automates script minification, "
"TypeScript compilation, code quality \"lint\" tools, CSS pre-processors, and"
" just about any repetitive chore that needs doing to support client "
"development. Grunt is fully supported in Visual Studio 2015, though the "
"ASP.NET project templates use Gulp by default (see :doc:`using-gulp`)."
msgstr ""

#: ..\..\client-side\using-grunt.rst:13
msgid "In this article:"
msgstr ""

#: ..\..\client-side\using-grunt.rst:9
msgid "`Preparing the application`_"
msgstr ""

#: ..\..\client-side\using-grunt.rst:10
msgid "`Configuring NPM`_"
msgstr ""

#: ..\..\client-side\using-grunt.rst:11
msgid "`Configuring Grunt`_"
msgstr ""

#: ..\..\client-side\using-grunt.rst:12
msgid "`Watching for changes`_"
msgstr ""

#: ..\..\client-side\using-grunt.rst:13
msgid "`Binding to Visual Studio events`_"
msgstr ""

#: ..\..\client-side\using-grunt.rst:15
msgid ""
"This example uses the Empty ASP.NET 5 project template as its starting "
"point, to show how to automate the client build process from scratch."
msgstr ""

#: ..\..\client-side\using-grunt.rst:17
msgid ""
"The finished example cleans the target deployment directory, combines "
"JavaScript files, checks code quality, condenses JavaScript file content and"
" deploys to the root of your web application. We will use the following "
"packages:"
msgstr ""

#: ..\..\client-side\using-grunt.rst:19
msgid "**grunt**: The Grunt task runner package."
msgstr ""

#: ..\..\client-side\using-grunt.rst:20
msgid "**grunt-contrib-clean**: A task that removes files or directories."
msgstr ""

#: ..\..\client-side\using-grunt.rst:21
msgid "**grunt-contrib-jshint**: A task that reviews JavaScript code quality."
msgstr ""

#: ..\..\client-side\using-grunt.rst:22
msgid "**grunt-contrib-concat**: A task that joins files into a single file."
msgstr ""

#: ..\..\client-side\using-grunt.rst:23
msgid ""
"**grunt-contrib-uglify**: A task that minifies JavaScript to reduce size."
msgstr ""

#: ..\..\client-side\using-grunt.rst:24
msgid "**grunt-contrib-watch**: A task that watches file activity."
msgstr ""

#: ..\..\client-side\using-grunt.rst:27
msgid "Preparing the application"
msgstr ""

#: ..\..\client-side\using-grunt.rst:29
msgid ""
"To begin, set up a new empty web application and add TypeScript example "
"files. TypeScript files are automatically compiled into JavaScript using "
"default Visual Studio 2015 settings and will be our raw material to process "
"using Grunt."
msgstr ""

#: ..\..\client-side\using-grunt.rst:31
msgid "In Visual Studio 2015, create a new ``ASP.NET Web Application``."
msgstr ""

#: ..\..\client-side\using-grunt.rst:32
msgid ""
"In the **New ASP.NET Project** dialog, select the **ASP.NET 5 Empty** "
"template and click the OK button."
msgstr ""

#: ..\..\client-side\using-grunt.rst:33
msgid ""
"In the Solution Explorer, review the project structure. The ``\\src`` folder"
" includes empty ``wwwroot`` and ``Dependencies`` nodes."
msgstr ""

#: ..\..\client-side\using-grunt.rst:37
msgid "Add a new folder named ``TypeScript`` to your project directory."
msgstr ""

#: ..\..\client-side\using-grunt.rst:38
msgid ""
"Before adding any files, letâ€™s make sure that Visual Studio 2015 has the "
"option 'compile on save' for TypeScript files checked. *Tools > Options > "
"Text Editor > Typescript > Project*"
msgstr ""

#: ..\..\client-side\using-grunt.rst:42
msgid ""
"6.      Right-click the ``TypeScript`` directory and select **Add > New "
"Item** from the context menu. Select the **JavaScript file** item and name "
"the file **Tastes.ts** (note the \\*.ts extension). Copy the line of "
"TypeScript code below into the file (when you save, a new Tastes.js file "
"will appear with the JavaScript source). enum Tastes { Sweet, Sour, Salty, "
"Bitter }"
msgstr ""

#: ..\..\client-side\using-grunt.rst:49
msgid ""
"Add a second file to the **TypeScript** directory and name it ``Food.ts``. "
"Copy the code below into the file."
msgstr ""

#: ..\..\client-side\using-grunt.rst:77
msgid "Configuring NPM"
msgstr ""

#: ..\..\client-side\using-grunt.rst:79
msgid "Next, configure NPM to download grunt and grunt-tasks."
msgstr ""

#: ..\..\client-side\using-grunt.rst:81
msgid ""
"In the Solution Explorer, right-click the project and select **Add > New "
"Item** from the context menu. Select the **NPM configuration file** item, "
"leave the default name, ``package.json``, and click the **Add** button."
msgstr ""

#: ..\..\client-side\using-grunt.rst:83
msgid ""
"In the package.json file, inside the ``devDependencies`` object braces, "
"enter \"grunt\". Select ``grunt`` from the Intellisense list and press the "
"Enter key. Visual Studio will quote the grunt package name, and add a colon."
" To the right of the colon, select the latest stable version of the package "
"from the top of the Intellisense list (press ``Ctrl-Space`` if Intellisense "
"does not appear)."
msgstr ""

#: ..\..\client-side\using-grunt.rst:87
msgid ""
"NPM uses `semantic versioning <http://semver.org/>`_ to organize "
"dependencies. Semantic versioning, also known as SemVer, identifies packages"
" with the numbering scheme <major>.<minor>.<patch>. Intellisense simplifies "
"semantic versioning by showing only a few common choices. The top item in "
"the Intellisense list (0.4.5 in the example above) is considered the latest "
"stable version of the package. The carat ^ symbol matches the most recent "
"major version and the tilde ~ matches the most recent minor version. See the"
" `NPM semver version parser reference "
"<https://www.npmjs.com/package/semver>`_ as a guide to the full expressivity"
" that SemVer provides."
msgstr ""

#: ..\..\client-side\using-grunt.rst:89
msgid ""
"Add more dependencies to load grunt-contrib* packages for *clean, jshint, "
"concat, uglify and watch* as shown in the example below. The versions do not"
" need to match the example."
msgstr ""

#: ..\..\client-side\using-grunt.rst:102
msgid "Save the ``package.json`` file."
msgstr ""

#: ..\..\client-side\using-grunt.rst:104
msgid ""
"The packages for each devDependencies item will download, along with any "
"files that each package requires. You can find the package files in the "
"``node_modules`` directory by enabling the **Show All Files** button in the "
"Solution Explorer."
msgstr ""

#: ..\..\client-side\using-grunt.rst:108
msgid ""
"If you need to, you can manually restore dependencies in Solution Explorer "
"by right-clicking on ``Dependencies\\\\NPM`` and selecting the **Restore "
"Packages** menu option."
msgstr ""

#: ..\..\client-side\using-grunt.rst:114
msgid "Configuring Grunt"
msgstr ""

#: ..\..\client-side\using-grunt.rst:116
msgid ""
"Grunt is configured using a manifest named ``Gruntfile.js`` that defines, "
"loads and registers tasks that can be run manually or configured to run "
"automatically based on events in Visual Studio."
msgstr ""

#: ..\..\client-side\using-grunt.rst:118
msgid ""
"Right-click the project and select **Add > New Item**. Select the **Grunt "
"Configuration file** option, leave the default name, ``Gruntfile.js``, and "
"click the **Add** button."
msgstr ""

#: ..\..\client-side\using-grunt.rst:120
msgid ""
"The initial code includes a module definition and the ``grunt.initConfig()``"
" method. The ``initConfig()`` is used to set options for each package, and "
"the remainder of the module will load and register tasks."
msgstr ""

#: ..\..\client-side\using-grunt.rst:129
msgid ""
"Inside the ``initConfig()`` method, add options for the ``clean`` task as "
"shown in the example Gruntfile.js below. The clean task accepts an array of "
"directory strings. This task removes files from wwwroot/lib and removes the "
"entire /temp directory."
msgstr ""

#: ..\..\client-side\using-grunt.rst:139
msgid ""
"Below the initConfig() method, add a call to ``grunt.loadNpmTasks()``. This "
"will make the task runnable from Visual Studio."
msgstr ""

#: ..\..\client-side\using-grunt.rst:145
msgid ""
"Save Gruntfile.js. The file should look something like the screenshot below."
msgstr ""

#: ..\..\client-side\using-grunt.rst:149
msgid ""
"Right-click Gruntfile.js and select **Task Runner Explorer** from the "
"context menu. The Task Runner Explorer window will open."
msgstr ""

#: ..\..\client-side\using-grunt.rst:153
msgid ""
"Verify that ``clean`` shows under **Tasks** in the Task Runner Explorer."
msgstr ""

#: ..\..\client-side\using-grunt.rst:157
msgid ""
"Right-click the clean task and select **Run** from the context menu. A "
"command window displays progress of the task."
msgstr ""

#: ..\..\client-side\using-grunt.rst:161
msgid ""
"There are no files or directories to clean yet. If you like, you can "
"manually create them in the Solution Explorer and then run the clean task as"
" a test."
msgstr ""

#: ..\..\client-side\using-grunt.rst:163
msgid ""
"In the initConfig() method, add an entry for ``concat`` using the code "
"below."
msgstr ""

#: ..\..\client-side\using-grunt.rst:165
msgid ""
"The ``src`` property array lists files to combine, in the order that they "
"should be combined. The ``dest`` property assigns the path to the combined "
"file that is produced."
msgstr ""

#: ..\..\client-side\using-grunt.rst:176
msgid ""
"The ``all`` property in the code above is the name of a target. Targets are "
"used in some Grunt tasks to allow multiple build environments. You can view "
"the built-in targets using Intellisense or assign your own."
msgstr ""

#: ..\..\client-side\using-grunt.rst:178
msgid "Add the ``jshint`` task using the code below."
msgstr ""

#: ..\..\client-side\using-grunt.rst:180
msgid ""
"The jshint code-quality utility is run against every JavaScript file found "
"in the temp directory."
msgstr ""

#: ..\..\client-side\using-grunt.rst:191
msgid ""
"The option \"-W069\" is an error produced by jshint when JavaScript uses "
"bracket syntax to assign a property instead of dot notation, i.e. "
"``Tastes[\"Sweet\"]`` instead of ``Tastes.Sweet``. The option turns off the "
"warning to allow the rest of the process to continue."
msgstr ""

#: ..\..\client-side\using-grunt.rst:193
msgid "Add the ``uglify`` task using the code below."
msgstr ""

#: ..\..\client-side\using-grunt.rst:195
msgid ""
"The task minifies the combined.js file found in the temp directory and "
"creates the result file in wwwroot/lib following the standard naming "
"convention <file name>.min.js."
msgstr ""

#: ..\..\client-side\using-grunt.rst:206
msgid ""
"Under the call grunt.loadNpmTasks() that loads grunt-contrib-clean, include "
"the same call for jshint, concat and uglify using the code below."
msgstr ""

#: ..\..\client-side\using-grunt.rst:214
msgid ""
"Save ``Gruntfile.js``. The file should look something like the example "
"below."
msgstr ""

#: ..\..\client-side\using-grunt.rst:218
msgid ""
"Notice that the Task Runner Explorer Tasks list includes ``clean``, "
"``concat``, ``jshint`` and ``uglify`` tasks. Run each task in order and "
"observe the results in Solution Explorer. Each task should run without "
"errors."
msgstr ""

#: ..\..\client-side\using-grunt.rst:222
msgid ""
"The concat task creates a new combined.js file and places it into the temp "
"directory. The jshint task simply runs and doesnâ€™t produce output. The "
"uglify task creates a new combined.min.js file and places it into "
"wwwroot/lib. On completion, the solution should look something like the "
"screenshot below:"
msgstr ""

#: ..\..\client-side\using-grunt.rst:226
msgid ""
"For more information on the options for each package, visit "
"https://www.npmjs.com/ and lookup the package name in the search box on the "
"main page. For example, you can look up the grunt-contrib-clean package to "
"get a documentation link that explains all of its parameters."
msgstr ""

#: ..\..\client-side\using-grunt.rst:229
msgid "All Together Now"
msgstr ""

#: ..\..\client-side\using-grunt.rst:231
msgid ""
"Use the Grunt ``registerTask()`` method to run a series of tasks in a "
"particular sequence. For example, to run the example steps above in the "
"order clean -> concat -> jshint -> uglify, add the code below to the module."
" The code should be added to the same level as the loadNpmTasks() calls, "
"outside initConfig."
msgstr ""

#: ..\..\client-side\using-grunt.rst:237
msgid ""
"The new task shows up in Task Runner Explorer under Alias Tasks. You can "
"right-click and run it just as you would other tasks. The ``all`` task will "
"run ``clean``, ``concat``, ``jshint`` and ``uglify``, in order."
msgstr ""

#: ..\..\client-side\using-grunt.rst:242
msgid "Watching for changes"
msgstr ""

#: ..\..\client-side\using-grunt.rst:244
msgid ""
"A ``watch`` task keeps an eye on files and directories. The watch triggers "
"tasks automatically if it detects changes. Add the code below to initConfig "
"to watch for changes to \\*.js files in the TypeScript directory. If a "
"JavaScript file is changed, ``watch`` will run the ``all`` task."
msgstr ""

#: ..\..\client-side\using-grunt.rst:253
msgid ""
"Add a call to ``loadNpmTasks()`` to show the ``watch`` task in Task Runner "
"Explorer."
msgstr ""

#: ..\..\client-side\using-grunt.rst:259
msgid ""
"Right-click the watch task in Task Runner Explorer and select Run from the "
"context menu. The command window that shows the watch task running will "
"display a waitingâ€¦ message. Open one of the TypeScript files, add a space, "
"and then save the file. This will trigger the watch task and trigger the "
"other tasks to run in order. The screenshot below shows a sample run."
msgstr ""

#: ..\..\client-side\using-grunt.rst:264
msgid "Binding to Visual Studio Events"
msgstr ""

#: ..\..\client-side\using-grunt.rst:266
msgid ""
"Unless you want to manually start your tasks every time you work in Visual "
"Studio, you can bind tasks to **Before Build**, **After Build**, **Clean**, "
"and **Project Open** events."
msgstr ""

#: ..\..\client-side\using-grunt.rst:268
msgid ""
"Letâ€™s bind ``watch`` so that it runs every time Visual Studio opens. In Task"
" Runner Explorer, right-click the watch task and select **Bindings > Project"
" Open** from the context menu."
msgstr ""

#: ..\..\client-side\using-grunt.rst:272
msgid ""
"Unload and reload the project. When the project loads again, the watch task "
"will start running automatically."
msgstr ""

#: ..\..\client-side\using-grunt.rst:275
msgid "Summary"
msgstr ""

#: ..\..\client-side\using-grunt.rst:277
msgid ""
"Grunt is a powerful task runner that can be used to automate most client-"
"build tasks. Grunt leverages NPM to deliver its packages, and features "
"tooling integration with Visual Studio 2015. Visual Studio's Task Runner "
"Explorer detects changes to configuration files and provides a convenient "
"interface to run tasks, view running tasks, and bind tasks to Visual Studio "
"events."
msgstr ""

#: ..\..\client-side\using-grunt.rst:280
msgid "See Also"
msgstr ""

#: ..\..\client-side\using-grunt.rst:282
msgid ":doc:`using-gulp`"
msgstr ""
