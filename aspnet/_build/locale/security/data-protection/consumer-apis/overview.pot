# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Microsoft
# This file is distributed under the same license as the ASP.NET package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ASP.NET 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-12 14:35-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\security\data-protection\consumer-apis\overview.rst:2
msgid "Consumer APIs Overview"
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:4
msgid "The IDataProtectionProvider and IDataProtector interfaces are the basic interfaces through which consumers use the data protection system. They are located in the Microsoft.AspNet.DataProtection.Interfaces package."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:7
msgid "IDataProtectionProvider"
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:9
msgid "The provider interface represents the root of the data protection system. It cannot directly be used to protect or unprotect data. Instead, the consumer must get a reference to an IDataProtector by calling IDataProtectionProvider.CreateProtector(purpose), where purpose is a string that describes the intended consumer use case. See :doc:`purpose-strings` for much more information on the intent of this parameter and how to choose an appropriate value."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:12
msgid "IDataProtector"
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:14
msgid "The protector interface is returned by a call to CreateProtector, and it is this interface which consumers can use to perform protect and unprotect operations."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:16
msgid "To protect a piece of data, pass the data to the Protect method. The basic interface defines a method which converts byte[] -> byte[], but there is also an overload (provided as an extension method) which converts string -> string. The security offered by the two methods is identical; the developer should choose whichever overload is most convenient for his use case. Irrespective of the overload chosen, the value returned by the Protect method is now protected (enciphered and tamper-proofed), and the application can send it to an untrusted client."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:18
msgid "To unprotect a previously-protected piece of data, pass the protected data to the Unprotect method. (There are byte[]-based and string-based overloads for developer convenience.) If the protected payload was generated by an earlier call to Protect on this same IDataProtector, the Unprotect method will return the original unprotected payload. If the protected payload has been tampered with or was produced by a different IDataProtector, the Unprotect method will throw CryptographicException."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:20
msgid "The concept of same vs. different IDataProtector ties back to the concept of purpose. If two IDataProtector instances were generated from the same root IDataProtectionProvider but via different purpose strings in the call to IDataProtectionProvider.CreateProtector, then they are considered :doc:`different protectors <purpose-strings>`, and one will not be able to unprotect payloads generated by the other."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:23
msgid "Consuming these interfaces"
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:25
msgid "For a DI-aware component, the intended usage is that the component take an IDataProtectionProvider parameter in its constructor and that the DI system automatically provides this service when the component is instantiated."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:28
msgid "Some applications (such as console applications or ASP.NET 4.x applications) might not be DI-aware so cannot use the mechanism described here. For these scenarios consult the :doc:`../configuration/non-di-scenarios` document for more information on getting an instance of an IDataProtection provider without going through DI."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:30
msgid "The following sample demonstrates three concepts:"
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:32
msgid ":doc:`Adding the data protection system <../configuration/overview>` to the service container,"
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:33
msgid "Using DI to receive an instance of an IDataProtectionProvider, and"
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:34
msgid "Creating an IDataProtector from an IDataProtectionProvider and using it to protect and unprotect data."
msgstr ""

#: ..\..\security\data-protection\consumer-apis\overview.rst:41
msgid "The package Microsoft.AspNet.DataProtection.Interfaces contains an extension method IServiceProvider.GetDataProtector as a developer convenience. It encapsulates as a single operation both retrieving an IDataProtectionProvider from the service provider and calling IDataProtectionProvider.CreateProtector. The following sample demonstrates its usage."
msgstr ""

#: ..\..\security\data-protection\thread-safety-included.txt:2
msgid "Instances of IDataProtectionProvider and IDataProtector are thread-safe for multiple callers. It is intended that once a component gets a reference to an IDataProtector via a call to CreateProtector, it will use that reference for multiple calls to Protect and Unprotect."
msgstr ""

#: ..\..\security\data-protection\thread-safety-included.txt:4
msgid "A call to Unprotect will throw CryptographicException if the protected payload cannot be verified or deciphered. Some components may wish to ignore errors during unprotect operations; a component which reads authentication cookies might handle this error and treat the request as if it had no cookie at all rather than fail the request outright. Components which want this behavior should specifically catch CryptographicException instead of swallowing all exceptions."
msgstr ""

