#
msgid ""
msgstr ""
"Project-Id-Version: ASP.NET 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-12 14:35-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\fundamentals\middleware.rst:2 ..\..\fundamentals\middleware.rst:0
#: ..\..\fundamentals\middleware.rst:123
msgid "Middleware"
msgstr ""

#: ..\..\fundamentals\middleware.rst:3
msgid "By `Steve Smith`_"
msgstr ""

#: ..\..\fundamentals\middleware.rst:5
msgid ""
"Small application components that can be incorporated into an HTTP request "
"pipeline are known collectively as middleware. ASP.NET 5 has integrated "
"support for middleware, which are wired up in an application's ``Configure``"
" method during :doc:`startup`."
msgstr ""

#: ..\..\fundamentals\middleware.rst:11
msgid "In this article:"
msgstr ""

#: ..\..\fundamentals\middleware.rst:8
msgid "`What is middleware`_"
msgstr ""

#: ..\..\fundamentals\middleware.rst:9
msgid "`Creating a middleware pipeline with IApplicationBuilder`_"
msgstr ""

#: ..\..\fundamentals\middleware.rst:10
msgid "`Built-in middleware`_"
msgstr ""

#: ..\..\fundamentals\middleware.rst:11
msgid "`Writing middleware`_"
msgstr ""

#: ..\..\fundamentals\middleware.rst:13
msgid ""
"`Download sample from GitHub "
"<https://github.com/aspnet/docs/aspnet/fundamentals/middleware/_static/sample>`_."
msgstr ""

#: ..\..\fundamentals\middleware.rst:16
msgid "What is middleware"
msgstr ""

#: ..\..\fundamentals\middleware.rst:18
msgid ""
"Middleware are components that are assembled into an application pipeline to"
" handle requests and responses. Each component can choose whether to pass "
"the request on to the next component in the pipeline, and can perform "
"certain actions before and after the next component in the pipeline. Request"
" delegates are used to build this request pipeline, which are then used to "
"handle each incoming HTTP request to your application."
msgstr ""

#: ..\..\fundamentals\middleware.rst:20
msgid ""
"Request delegates are configured using ``Run``, ``Map``, and ``Use`` "
"extension methods on the ``IApplicationBuilder`` type that is passed into "
"the ``Configure`` method in the ``Startup`` class. An individual request "
"delegate can be specified in-line as an anonymous method, or it can be "
"defined in a reusable class. These reusable classes  are `middleware`, or "
"`middleware components`. Each middleware component in the request pipeline "
"is responsible for invoking the next component in the chain, or choosing to "
"short-circuit the chain if appropriate."
msgstr ""

#: ..\..\fundamentals\middleware.rst:23
msgid "Creating a middleware pipeline with IApplicationBuilder"
msgstr ""

#: ..\..\fundamentals\middleware.rst:25
msgid ""
"The ASP.NET request pipeline consists of a sequence of request delegates, "
"called one after the next, as this diagram shows (the thread of execution "
"follows the black arrows):"
msgstr ""

#: ..\..\fundamentals\middleware.rst:29
msgid ""
"Each delegate has the opportunity to perform operations before and after the"
" next delegate. Any delegate can choose to stop passing the request on to "
"the next delegate, and instead handle the request itself. This is referred "
"to as short-circuiting the request pipeline, and is desirable because it "
"allows unnecessary work to be avoided. For example, an authorization "
"middleware function might only call the next delegate in the pipeline if the"
" request is authenticated, otherwise it could short-circuit the pipeline and"
" simply return some form of \"Not Authorized\" response. Exception handling "
"delegates need to be called early on in the pipeline, so they are able to "
"catch exceptions that occur in later calls within the call chain."
msgstr ""

#: ..\..\fundamentals\middleware.rst:31
msgid ""
"You can see an example of setting up a request pipeline, using a variety of "
"request delegates, in the default web site template that ships with Visual "
"Studio 2015. Its ``Configure`` method, shown below, first wires up error "
"pages (in development) or the site's production error handler, then builds "
"out the pipeline with support for static files, ASP.NET Identity "
"authentication, and finally, ASP.NET MVC."
msgstr ""

#: ..\..\fundamentals\middleware.rst:40
msgid ""
"Because of the order in which this pipeline was constructed, the middleware "
"configured by the ``UseErrorHandler`` method will catch any exceptions that "
"occur in later calls (in non-development environments). Also, in this "
"example a design decision has been made that static files will not be "
"protected by any authentication. This is a tradeoff that improves "
"performance when handling static files since no other middleware (such as "
"authentication middleware) needs to be called when handling these requests "
"(ASP.NET 5 uses a specific ``wwwroot`` folder for all files that should be "
"accessible by default, so there is typically no need to perform "
"authentication before sending these files). If the request is not for a "
"static file, it will flow to the next piece of middleware defined in the "
"pipeline (in this case, Identity). Learn more about :doc:`static-files`."
msgstr ""

#: ..\..\fundamentals\middleware.rst:42
msgid ""
"**Remember:** the order in which you arrange your ``Use[Middleware]`` "
"statements in your application's ``Configure`` method is very important. Be "
"sure you have a good understanding of how your application's request "
"pipeline will behave in various scenarios."
msgstr ""

#: ..\..\fundamentals\middleware.rst:44
msgid ""
"The simplest possible ASP.NET application sets up a single request delegate "
"that handles all requests. In this case, there isn't really a request "
"\"pipeline\", so much as a single anonymous function that is called in "
"response to every HTTP request."
msgstr ""

#: ..\..\fundamentals\middleware.rst:52
msgid ""
"It's important to realize that request delegate, as written here, will "
"terminate the pipeline, regardless of other calls to ``App.Run`` that you "
"may include. In the following example, only the first delegate (\"Hello, "
"World!\") will be executed and displayed."
msgstr ""

#: ..\..\fundamentals\middleware.rst:61
msgid ""
"You chain multiple request delegates together making a different call, with "
"a ``next`` parameter representing the next delegate in the pipeline. Note "
"that just because you're calling it \"next\" doesn't mean you can't perform "
"actions both before and after the next delegate, as this example "
"demonstrates:"
msgstr ""

#: ..\..\fundamentals\middleware.rst:70
msgid ""
"Be wary of modifying ``HttpResponse`` after invoking next, since one of the "
"components further down the pipeline may have written to the response, "
"causing it to be sent to the client."
msgstr ""

#: ..\..\fundamentals\middleware.rst:72
msgid ""
"This ``ConfigureLogInline`` method is called when the application is run "
"with an environment set to ``LogInline``. Learn more about "
":doc:`environments`. We will be using variations of "
"``Configure[Environment]`` to show different options in the rest of this "
"article. The easiest way to run the samples in Visual Studio is with the "
"``web`` command, which is configured in ``hosting.ini`` to listen on "
"``http://localhost:5000``. See also :doc:`startup`."
msgstr ""

#: ..\..\fundamentals\middleware.rst:74
msgid ""
"In the above example, the call to ``await next.Invoke()`` will call into the"
" delegate on line 14. The client will receive the expected response (\"Hello"
" from LogInline\"), and the server's console output includes both the before"
" and after messages, as you can see here:"
msgstr ""

#: ..\..\fundamentals\middleware.rst:79
msgid "Run, Map, and Use"
msgstr ""

#: ..\..\fundamentals\middleware.rst:81
msgid ""
"You configure the HTTP pipeline using the `extensions "
"<https://github.com/aspnet/HttpAbstractions/tree/dev/src/Microsoft.AspNet.Http.Abstractions/Extensions>`_"
" ``Run``, ``Map``, and ``Use``. By convention, the ``Run`` method is simply "
"a shorthand way of adding middleware to the pipeline that doesn't call any "
"other middleware (that is, it will not call a ``next`` request delegate). "
"Thus, ``Run`` should only be called at the end of your pipeline. ``Run`` is "
"a convention, and some middleware components may expose their own "
"Run[Middleware] methods that should only run at the end of the pipeline. The"
" following two examples (one using ``Run`` and the other ``Use``) are "
"equivalent to one another, since the second one doesn't use its ``next`` "
"parameter:"
msgstr ""

#: ..\..\fundamentals\middleware.rst:90
msgid ""
"The `IApplicationBuilder interface "
"<https://github.com/aspnet/HttpAbstractions/blob/1.0.0-beta5/src/Microsoft.AspNet.Http.Abstractions/IApplicationBuilder.cs#L17>`_"
" itself exposes a single ``Use`` method, so technically they're not all "
"*extension* methods."
msgstr ""

#: ..\..\fundamentals\middleware.rst:92
msgid ""
"We've already seen several examples of how to build a request pipeline with "
"``Use``. ``Map*`` extensions are used as a convention for branching the "
"pipeline. The current implementation supports branching based based on the "
"request's path, or using a predicate. The ``Map`` extension method is used "
"to match request delegates based on a request's path. ``Map`` simply accepts"
" a path and a function that configures a separate middleware pipeline. In "
"the following example, any request with the base path of ``/maptest`` will "
"be handled by the pipeline configured in the ``HandleMapTest`` method."
msgstr ""

#: ..\..\fundamentals\middleware.rst:101
msgid ""
"When ``Map`` is used, the matched path segment(s) are removed from "
"``HttpRequest.Path`` and appended to ``HttpRequest.PathBase`` for each "
"request."
msgstr ""

#: ..\..\fundamentals\middleware.rst:103
msgid ""
"In addition to path-based mapping, the ``MapWhen`` method supports "
"predicate-based middleware branching, allowing separate pipelines to be "
"constructed in a very flexible fashion. Any predicate of type "
"``Func<HttpContext, bool>`` can be used to map requests to a new branch of "
"the pipeline. In the following example, a simple predicate is used to detect"
" the presence of a querystring variable ``branch``:"
msgstr ""

#: ..\..\fundamentals\middleware.rst:112
msgid ""
"Using the configuration shown above, any request that includes a querystring"
" value for ``branch`` will use the pipeline defined in the ``HandleBranch`` "
"method (in this case, a response of \"Branch used.\"). All other requests "
"(that do not define a querystring value for ``branch``) will be handled by "
"the delegate defined on line 17."
msgstr ""

#: ..\..\fundamentals\middleware.rst:115
msgid "Built-in middleware"
msgstr ""

#: ..\..\fundamentals\middleware.rst:117
msgid "ASP.NET ships with the following middleware components:"
msgstr ""

#: ..\..\fundamentals\middleware.rst:124
msgid "Description"
msgstr ""

#: ..\..\fundamentals\middleware.rst:125
msgid ":doc:`Authentication </security/sociallogins>`"
msgstr ""

#: ..\..\fundamentals\middleware.rst:126
msgid "Provides authentication support."
msgstr ""

#: ..\..\fundamentals\middleware.rst:127
msgid "`CORS <https://github.com/aspnet/CORS/tree/1.0.0-beta6>`_"
msgstr ""

#: ..\..\fundamentals\middleware.rst:128
msgid "Configures Cross-Origin Resource Sharing."
msgstr ""

#: ..\..\fundamentals\middleware.rst:129
msgid ":doc:`diagnostics`"
msgstr ""

#: ..\..\fundamentals\middleware.rst:130
msgid "Includes support for error pages and runtime information."
msgstr ""

#: ..\..\fundamentals\middleware.rst:131
msgid ":doc:`routing`"
msgstr ""

#: ..\..\fundamentals\middleware.rst:132
msgid "Define and constrain request routes."
msgstr ""

#: ..\..\fundamentals\middleware.rst:133
msgid "`Session <https://github.com/aspnet/Session>`_"
msgstr ""

#: ..\..\fundamentals\middleware.rst:134
msgid "Provides support for managing user sessions."
msgstr ""

#: ..\..\fundamentals\middleware.rst:135
msgid ":doc:`Static Files <static-files>`"
msgstr ""

#: ..\..\fundamentals\middleware.rst:136
msgid "Provides support for serving static files, and directory browsing."
msgstr ""

#: ..\..\fundamentals\middleware.rst:139
msgid "Writing middleware"
msgstr ""

#: ..\..\fundamentals\middleware.rst:141
msgid ""
"For more complex request handling functionality, the ASP.NET team recommends"
" implementing the middleware in its own class, and exposing an "
"``IApplicationBuilder`` extension method that can be called from the "
"``Configure`` method. The simple logging middleware shown in the previous "
"example can be converted into a middleware class that takes in the next "
"``RequestDelegate`` in its constructor and supports an ``Invoke`` method as "
"shown:"
msgstr ""

#: ..\..\fundamentals\middleware.rst:0
msgid "RequestLoggerMiddleware.cs"
msgstr ""

#: ..\..\fundamentals\middleware.rst:149
msgid ""
"The middleware follows the `Explicit Dependencies Principle "
"<http://deviq.com/explicit-dependencies-principle/>`_ and exposes all of its"
" dependencies in its constructor. Middleware can take advantage of the "
"`UseMiddleware<T> "
"<https://github.com/aspnet/HttpAbstractions/blob/1.0.0-beta6/src/Microsoft.AspNet.Http.Abstractions/Extensions/UseMiddlewareExtensions.cs>`_"
" extension to inject services directly into their constructors, as shown in "
"the example below. Dependency injected services are automatically filled, "
"and the extension takes a ``params`` array of arguments to be used for non-"
"injected parameters."
msgstr ""

#: ..\..\fundamentals\middleware.rst:0
msgid "RequestLoggerExtensions.cs"
msgstr ""

#: ..\..\fundamentals\middleware.rst:159
msgid ""
"Using the extension method and associated middleware class, the "
"``Configure`` method becomes very simple and readable."
msgstr ""

#: ..\..\fundamentals\middleware.rst:168
msgid ""
"Although ``RequestLoggerMiddleware`` requires an ``ILoggerFactory`` "
"parameter in its constructor, neither the ``Startup`` class nor the "
"``UseRequestLogger`` extension method need to explicitly supply it. Instead,"
" it is automatically provided through dependency injection performed within "
"``UseMiddleware<T>``."
msgstr ""

#: ..\..\fundamentals\middleware.rst:170
msgid ""
"Testing the middleware (by setting the ``ASPNET_ENV`` environment variable "
"to ``LogMiddleware``) should result in output like the following (when using"
" WebListener):"
msgstr ""

#: ..\..\fundamentals\middleware.rst:174
msgid ""
"You can see another example of ``UseMiddleware<T>`` in action in the "
"`UseStaticFiles "
"<https://github.com/aspnet/StaticFiles/blob/1.0.0-beta6/src/Microsoft.AspNet.StaticFiles/StaticFileExtensions.cs#L44>`_"
" extension method, which is used to create the `StaticFileMiddleware "
"<https://github.com/aspnet/StaticFiles/blob/1.0.0-beta6/src/Microsoft.AspNet.StaticFiles/StaticFileMiddleware.cs#L30>`_"
" with its required constructor parameters. In this case, the "
"``StaticFileOptions`` parameter is passed in, but other constructor "
"parameters are supplied by ``UseMiddleware<T>`` and dependency injection."
msgstr ""

#: ..\..\fundamentals\middleware.rst:177
msgid "Summary"
msgstr ""

#: ..\..\fundamentals\middleware.rst:179
msgid ""
"Middleware provide simple components for adding features to individual web "
"requests. Applications configure their request pipelines in accordance with "
"the features they need to support, and thus have fine-grained control over "
"the functionality each request uses. Developers can easily create their own "
"middleware to provide additional functionality to ASP.NET applications."
msgstr ""

#: ..\..\fundamentals\middleware.rst:182
msgid "Additional Resources"
msgstr ""

#: ..\..\fundamentals\middleware.rst:184
msgid ":doc:`startup`"
msgstr ""

#: ..\..\fundamentals\middleware.rst:185
msgid ":doc:`request-features`"
msgstr ""
