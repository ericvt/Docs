#
msgid ""
msgstr ""
"Project-Id-Version: ASP.NET 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-12 14:35-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\security\app-secrets.rst:2
msgid "Safe Storage of Application Secrets"
msgstr ""

#: ..\..\security\app-secrets.rst:4
msgid "By `Rick Anderson`_, `Daniel Roth`_"
msgstr ""

#: ..\..\security\app-secrets.rst:6
msgid ""
"This tutorial shows how your application can securely store and access "
"secrets in the local development environment. The most important point is "
"you should never store passwords or other sensitive data in source code, and"
" you shouldn't use production secrets in development and test mode. You can "
"instead use the :doc:`configuration </fundamentals/configuration>` system to"
" read these values from environment variables or from values stored using "
"the Secret Manager tool. The Secret Manager tool helps prevent sensitive "
"data from being checked into source control. The "
":doc:`/fundamentals/configuration` system that is used by default in DNX "
"based apps can read secrets stored with the Secret Manager tool described in"
" this article."
msgstr ""

#: ..\..\security\app-secrets.rst:12
msgid "In this article:"
msgstr ""

#: ..\..\security\app-secrets.rst:9
msgid "`Environment variables`_"
msgstr ""

#: ..\..\security\app-secrets.rst:10
msgid "`Installing the secret manager tool`_"
msgstr ""

#: ..\..\security\app-secrets.rst:11
msgid "`How the secret manager tool works`_"
msgstr ""

#: ..\..\security\app-secrets.rst:12
msgid "`Additional Resources`_"
msgstr ""

#: ..\..\security\app-secrets.rst:15
msgid "Environment variables"
msgstr ""

#: ..\..\security\app-secrets.rst:17
msgid ""
"To avoid storing app secrets in code or in local configuration files you can"
" instead store secrets in environment variables. You can setup the "
":doc:`configuration </fundamentals/configuration>` framework to read values "
"from environment variables by calling ``AddEnvironmentVariables`` when you "
"setup your configuration sources. You can then use environment variables to "
"override configuration values for all previously specified configuration "
"sources."
msgstr ""

#: ..\..\security\app-secrets.rst:19
msgid ""
"For example, if you create a new ASP.NET web site app with individual user "
"accounts, it will add a default connection string to the *config.json* file "
"in the project with the key ``Data:DefaultConnection:ConnectionString``. The"
" default connection string is setup to use LocalDB, which runs in user mode "
"and doesn't require a password. When you deploy your application to a test "
"or production server you can override the "
"``Data:DefaultConnection:ConnectionString`` key value with an environment "
"variable setting that contains the connection string (potentially with "
"sensitive credentials) for a test or production SQL Server."
msgstr ""

#: ..\..\security\app-secrets.rst:21
msgid ""
"Environment variables are generally stored in plain text and are not "
"encrypted. If the machine or process is compromised then environment "
"variables can be accessed by untrusted parties. Additional measures to "
"prevent disclosure of user secrets may still be required."
msgstr ""

#: ..\..\security\app-secrets.rst:24
msgid "Secret Manager"
msgstr ""

#: ..\..\security\app-secrets.rst:26
msgid ""
"The Secret Manager tool provides a more general mechanism to store sensitive"
" data for development work outside of your project tree. The Secret Manager "
"tool is a :doc:`DNX command </dnx/commands>` that can be used to store "
"secrets for DNX based projects during development. With the Secret Manager "
"tool you can associate app secrets with a specific project and share them "
"across multiple projects."
msgstr ""

#: ..\..\security\app-secrets.rst:28
msgid ""
"The Secret Manager tool does not encrypt the stored secrets and should not "
"be treated as a trusted store. It is for development purposes only."
msgstr ""

#: ..\..\security\app-secrets.rst:31
msgid "Installing the Secret Manager tool"
msgstr ""

#: ..\..\security\app-secrets.rst:33
msgid ""
"Install the Secret Manager tool using the .NET Development Utility (DNU). "
"The Secret Manager tool is installed as a :doc:`DNX command </dnx/commands>`"
" via the Microsoft.Framework.SecretManager package::"
msgstr ""

#: ..\..\security\app-secrets.rst:37
msgid "Test the Secret Manager tool by running the following command::"
msgstr ""

#: ..\..\security\app-secrets.rst:41
msgid "The Secret Manager tool will display usage, options and command help."
msgstr ""

#: ..\..\security\app-secrets.rst:43
msgid ""
"The Secret Manager tool operates on project specific configuration settings "
"that are stored in your user profile. To use user secrets the project must "
"specify a ``userSecretsId`` value in its *project.json* file. The value of "
"``userSecretsId`` is arbitrary, but is generally unique to the project."
msgstr ""

#: ..\..\security\app-secrets.rst:45
msgid ""
"Add a ``userSecretsId`` for your project in its *project.json* file, like "
"this:"
msgstr ""

#: ..\..\security\app-secrets.rst:56
msgid ""
"Use the Secret Manager tool to set a secret. For example, in a command "
"window from the project directory enter the following::"
msgstr ""

#: ..\..\security\app-secrets.rst:60
msgid ""
"You can run the secret manager tool from other directories, but you must use"
" the ``--project`` option to pass in the path to the *project.json* file, "
"like this::"
msgstr ""

#: ..\..\security\app-secrets.rst:64
msgid ""
"You can also use the Secret Mananger tool to list, remove and clear app "
"secrets."
msgstr ""

#: ..\..\security\app-secrets.rst:67
msgid "Accessing user secrets via configuration"
msgstr ""

#: ..\..\security\app-secrets.rst:69
msgid ""
"You can access user secrets stored using the Secret Manager tool via the "
"configuration system. To do so you first need to add the configuration "
"source for the user secrets."
msgstr ""

#: ..\..\security\app-secrets.rst:71
msgid "First install the user secrets configuration source to your project::"
msgstr ""

#: ..\..\security\app-secrets.rst:75
msgid "Then add the user secrets configuration source:"
msgstr ""

#: ..\..\security\app-secrets.rst:84
msgid "You can now access user secrets via the configuration API:"
msgstr ""

#: ..\..\security\app-secrets.rst:91
msgid "How the Secret Manager tool works"
msgstr ""

#: ..\..\security\app-secrets.rst:93
msgid ""
"The secret manager tool abstracts away the implementation details, such as "
"where and how the values are stored. You can use the tool without knowing "
"these implementation details. In the current version, the values are stored "
"in a `JSON <http://json.org/>`_ configuration file in the user profile "
"directory:"
msgstr ""

#: ..\..\security\app-secrets.rst:95
msgid "Windows: ``%APPDATA%\\microsoft\\UserSecrets\\<userSecretsId>\\secrets.json``"
msgstr ""

#: ..\..\security\app-secrets.rst:96
msgid "Linux: ``~/.microsoft/usersecrets/<userSecretsId>/secrets.json``"
msgstr ""

#: ..\..\security\app-secrets.rst:97
msgid "Mac: ``~/.microsoft/usersecrets/<userSecretsId>/secrets.json``"
msgstr ""

#: ..\..\security\app-secrets.rst:99
msgid ""
"The value of ``userSecretsId`` comes from the value specified in "
"*project.json*."
msgstr ""

#: ..\..\security\app-secrets.rst:101
msgid ""
"You should not write code that depends on the location or format of the data"
" saved with the secret manager tool, as these implementation details might "
"change. For example, the secret values are currently *not* encrypted today, "
"but could be someday."
msgstr ""

#: ..\..\security\app-secrets.rst:104
msgid "Additional Resources"
msgstr ""

#: ..\..\security\app-secrets.rst:106
msgid ":doc:`/fundamentals/configuration`."
msgstr ""

#: ..\..\security\app-secrets.rst:107
msgid ":doc:`/dnx/overview`."
msgstr ""
