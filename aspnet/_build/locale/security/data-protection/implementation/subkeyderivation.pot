# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Microsoft
# This file is distributed under the same license as the ASP.NET package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ASP.NET 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-12 14:35-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:4
msgid "Subkey Derivation and Authenticated Encryption"
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:6
msgid "Most keys in the key ring will contain some form of entropy and will have algorithmic information stating \"CBC-mode encryption + HMAC validation\" or \"GCM encryption + validation\". In these cases, we refer to the embedded entropy as the master keying material (or KM) for this key, and we perform a key derivation function to derive the keys that will be used for the actual cryptographic operations."
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:9
msgid "Keys are abstract, and a custom implementation might not behave as below. If the key provides its own implementation of IAuthenticatedEncryptor rather than using one of our built-in factories, the mechanism described in this section no longer applies."
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:14
msgid "Additional authenticated data and subkey derivation"
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:16
msgid "The IAuthenticatedEncryptor interface serves as the core interface for all authenticated encryption operations. Its Encrypt method takes two buffers: plaintext and additionalAuthenticatedData (AAD). The plaintext contents flow unchanged the call to IDataProtector.Protect, but the AAD is generated by the system and consists of three components:"
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:18
msgid "The 32-bit magic header 09 F0 C9 F0 that identifies this version of the data protection system."
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:19
msgid "The 128-bit key id."
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:20
msgid "A variable-length string formed from the purpose chain that created the IDataProtector that is performing this operation."
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:22
msgid "Because the AAD is unique for the tuple of all three components, we can use it to derive new keys from KM instead of using KM itself in all of our cryptographic operations. For every call to IAuthenticatedEncryptor.Encrypt, the following key derivation process takes place:"
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:24
msgid "( K\\ :sub:`E`, K\\ :sub:`H` ) = SP800_108_CTR_HMACSHA512(K\\ :sub:`M`, AAD, contextHeader || keyModifier)"
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:26
msgid "Here, we're calling the NIST SP800-108 KDF in Counter Mode (see `NIST SP800-108 <http://csrc.nist.gov/publications/nistpubs/800-108/sp800-108.pdf>`_, Sec. 5.1) with the following parameters:"
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:28
msgid "Key derivation key (KDK) = K\\ :sub:`M`"
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:29
msgid "PRF = HMACSHA512"
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:30
msgid "label = additionalAuthenticatedData"
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:31
msgid "context = contextHeader || keyModifier"
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:33
msgid "The context header is of variable length and essentially serves as a thumbprint of the algorithms for which we're deriving K\\ :sub:`E` and K\\ :sub:`H`. The key modifier is a 128-bit string randomly generated for each call to Encrypt and serves to ensure with overwhelming probability that KE and KH are unique for this specific authentication encryption operation, even if all other input to the KDF is constant."
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:35
msgid "For CBC-mode encryption + HMAC validation operations, | K\\ :sub:`E` | is the length of the symmetric block cipher key, and | K\\ :sub:`H` | is the digest size of the HMAC routine. For GCM encryption + validation operations, | K\\ :sub:`H` | = 0."
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:38
msgid "CBC-mode encryption + HMAC validation"
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:40
msgid "Once K\\ :sub:`E` is generated via the above mechanism, we generate a random initialization vector and run the symmetric block cipher algorithm to encipher the plaintext. The initialization vector and ciphertext are then run through the HMAC routine initialized with the key K\\ :sub:`H` to produce the MAC. This process and the return value is represented graphically below."
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:45
msgid "output:= keyModifier || iv || E\\ :sub:`cbc` (K\\ :sub:`E`,iv,data) || HMAC(K\\ :sub:`H`, iv || E\\ :sub:`cbc` (K\\ :sub:`E`,iv,data))"
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:48
msgid "The IDataProtector.Protect implementation will :ref:`prepend the magic header and key id <data-protection-implementation-authenticated-encryption-details>` to output before returning it to the caller. Because the magic header and key id are implicitly part of :ref:`AAD <data-protection-implementation-subkey-derivation-aad>`, and because the key modifier is fed as input to the KDF, this means that every single byte of the final returned payload is authenticated by the MAC."
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:51
msgid "Galois/Counter Mode encryption + validation"
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:53
msgid "Once K\\ :sub:`E` is generated via the above mechanism, we generate a random 96-bit nonce and run the symmetric block cipher algorithm to encipher the plaintext and produce the 128-bit authentication tag."
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:58
msgid "output := keyModifier || nounce || E\\ :sub:`gcm` (K\\ :sub:`E`,nounce,data) || authTag"
msgstr ""

#: ..\..\security\data-protection\implementation\subkeyderivation.rst:61
msgid "Even though GCM natively supports the concept of AAD, we're still feeding AAD only to the original KDF, opting to pass an empty string into GCM for its AAD parameter. The reason for this is two-fold. First, :ref:`to support agility <data-protection-implementation-context-headers>` we never want to use K\\ :sub:`M` directly as the encryption key. Additionally, GCM imposes very strict uniqueness requirements on its inputs. The probability that the GCM encryption routine is ever invoked on two or more distinct sets of input data with the same (key, nonce) pair must not exceed 2\\ :sup:`32`. If we fix K\\ :sub:`E` we cannot perform more than 2\\ :sup:`32` encryption operations before we run afoul of the 2\\ :sup:`-32` limit. This might seem like a very large number of operations, but a high-traffic web server can go through 4 billion requests in mere days, well within the normal lifetime for these keys. To stay compliant of the 2\\ :sup:`-32` probability limit, we continue to use a 128-bit key modifier and 96-bit nonce, which radically extends the usable operation count for any given K\\ :sub:`M`. For simplicity of design we share the KDF code path between CBC and GCM operations, and since AAD is already considered in the KDF there is no need to forward it to the GCM routine."
msgstr ""

